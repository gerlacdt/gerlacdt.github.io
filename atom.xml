<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title type="text">Daniel&#39;s programming rants</title>
    <subtitle type="html">MemE is a powerful and highly customizable GoHugo theme for personal blogs.</subtitle>
    <updated>2021-09-05T15:55:56+02:00</updated>
    <id>https://gerlacdt.github.io/</id>
    <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/" />
    <link rel="self" type="application/atom+xml" href="https://gerlacdt.github.io/atom.xml" />
    <author>
            <name>Daniel Gerlach</name>
            <uri>https://gerlacdt.github.io/</uri>
            </author>
    
    <generator uri="https://gohugo.io/" version="0.83.1">Hugo</generator>
        <entry>
            <title type="text">Reading List for the mindful Software Engineer</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/classic-papers/" />
            <id>https://gerlacdt.github.io/posts/classic-papers/</id>
            <updated>2021-09-05T15:51:39+02:00</updated>
            <published>2021-08-09T10:04:01+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Abstractions are essential in order to build complex systems and keep complexity under control. Especially in software development we rely on many abstractions to make our life easier. Although good abstractions do not &ldquo;leak&rdquo;, it&rsquo;s always helpful to understand the background and the details behind them.]]></summary>
            
                <content type="html"><![CDATA[<p>Abstractions are essential in order to build complex systems and keep
complexity under control. Especially in software development we rely
on many abstractions to make our life easier. Although good
abstractions do not &ldquo;leak&rdquo;, it&rsquo;s always helpful to understand the
background and the details behind them.</p>
<p>The following list (in chronological order) of classic computer
science papers will give you insights of inventions of the last
decades which are considered nowadays common sense. But back then,
even the most basic concepts needed to be invented or discovered. I
find it fascinating how much you can learn from the discovery of such
breakthroughs and I hope you can learn from them as much as I
did. Further it is quite satisfactory when one is able to connect the
dots from the past to the present. Knowing the history prevent you
from reinventing the wheel and from making similar failures:</p>
<blockquote>
<p>Those that fail to learn from history are doomed to repeat it.</p>
</blockquote>
<p>by Winston Churchill</p>
<h6 id="span-stylecolor-bluerecursive-functions-of-symbolic-expressions-and-their-computations-by-machine-part-ispan"><span style="color: blue">Recursive Functions of Symbolic Expressions and Their Computations by Machine, Part I</span></h6>
<p>by John McCarthy 1960</p>
<p><a href="http://www-formal.stanford.edu/jmc/recursive.pdf">Link to paper</a></p>
<p>This paper is special in it&rsquo;s own ways and is widely considered as a
seminal work of computer science.</p>
<p>John McCarthy defines the complete LISP programming language in
roughly 30 pages. The design of Lisp with <strong>S-expressions</strong> is
ingenious because it&rsquo;s so simple. 1960 most of the programming
language concepts, which we consider basic today, needed to be
defined. McCarthy does this on the go. He introduces <strong>conditional
expressions</strong> like <code>if-then-else</code>. Those are needed for <strong>recursive
functions</strong> in order to formulate the recursion termination
condition. Casually he also introduces the first
<strong>garbage-collection</strong> algorithm with a <code>free-storage-list</code>. All in
one paper, groundbreaking!</p>
<p>Unfortunately the paper is hard to &ldquo;digest&rdquo; due to it&rsquo;s age. A
contemporary and more comprehensible essay was written by Paul Graham,
<a href="http://www.paulgraham.com/rootsoflisp.html">The Roots of
Lisp</a>. Graham picks up
McCarthy&rsquo;s paper and brings it in a more readable form.</p>
<h6 id="span-stylecolor-blueon-the-criteria-to-be-used-in-decomposing-systems-into-modules-span"><span style="color: blue">On the Criteria To Be Used in Decomposing Systems into Modules </span></h6>
<p>by David Parnas 1972</p>
<p><a href="https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf">Link to paper</a></p>
<p>Today, we know modularization is a keystone for building large
software systems. Independent and autonomous teams are critical. To
achieve autonomy and smooth collaboration, modules must hide their
internal implementation, i.e. they should only expose the least
information which is absolutely necessary. The concept advocated by
Parnas is <strong>information hiding</strong>. It is crucial to <em>encapsulate</em> the
module&rsquo;s internals, so consumers do not have to deal with the module&rsquo;s
internal complexity. Parnas summarizes:</p>
<blockquote>
<p>The benefits expected of modular programming are: (1)
managerial-development time should be shortened because separate
groups would work on each module with little need for communication:
(2) product flexibility - it should be possible to make drastic
changes to one module without a need to change others; (3) com-
prehensibility - it should be possible to study the system one module at
a time. The whole system can therefore be better designed because it
is better understood.</p>
</blockquote>
<p>The principle of information hiding enables us to replace an existing
implementation but to keep the exposed interface. Hence existing
consumers remain untouched. Further modules can be reused and provide
their functionality safely. Basically Parnas paved the way for
<strong>APIs</strong> which are one of the most influential and powerful concepts
of software engineering. APIs act as contracts between consumer and
producer. This is true in the small scope for software libraries but
also in a large scope for REST-APIs, gRPC and the like. APIs and
modularization are preconditions for <strong>Microservices</strong> whose
functionality is hidden between a well-defined and documented
API. Even the Unix Philosophy is a &ldquo;just&rdquo; a description for a good
module:</p>
<ul>
<li>Do one thing well</li>
<li>Write programs that work together</li>
<li>Write programs to handle text streams, because that is a
<em>universal interface</em>.</li>
</ul>
<p>Historical fact: In the seventies information hiding was
controversial. Even the most renowned IT people like Fred Brooks who
managed the development of IBM&rsquo;s System/360 with thousands of people
and a budget of 5 billion dollars did not believe in it. Years later
Brooks admitted:</p>
<blockquote>
<p>David Parnas Was Right, and I Was Wrong About Information Hiding.</p>
</blockquote>
<h6 id="span-stylecolor-bluethe-mythical-man-month-essays-on-software-engineeringspan"><span style="color: blue">The Mythical Man-Month: Essays on Software Engineering</span></h6>
<p>by Fred Brooks 1975</p>
<p><a href="https://www.oreilly.com/library/view/mythical-man-month-the/0201835959/">Link to book</a></p>
<p>Fred Brooks &ldquo;Essays on Software Engineering&rdquo; are from the seventies
but many of his insights still hold up today. 50 years are an eternity
in the IT field and it speaks for the quality of this seminal book.</p>
<p>In his essay <em>The Mythical Man-Month</em>, he directly addresses software
project management fallacies and bad estimations. Developers are not
line workers but creative problem solvers - increasing their numbers
will not positively impact the project&rsquo;s progress.</p>
<blockquote>
<p>Adding manpower to a late software project makes it later.</p>
</blockquote>
<blockquote>
<p>Nine women can&rsquo;t make a baby in one month</p>
</blockquote>
<p>Many other terms are coined in his essays. He finds that there is <em>No
Silver Bullet</em>, i.e. no new technology or process that will improve
productivity by an order of magnitude. He also addresses the tendency
towards <strong>over-engineering</strong> in <em>the Second System effect</em> and warns
about its consequences.</p>
<blockquote>
<p>The second system is most dangerous system a man ever designs
&hellip; The general tendency is to over-design the second system, using
all ideas and frills that were cautiously sidetracked on the first
one.</p>
</blockquote>
<p>Further, he advocates for small, independent teams. <em>The surgical
team</em>, is a team with 5-10 people and cross-functional skills. Sounds
familiar Agile community?</p>
<h6 id="span-stylecolor-bluetime-clocks-and-the-ordering-of-events-in-a-distributed-systemspan"><span style="color: blue">Time, Clocks, and the Ordering of Events in a Distributed System</span></h6>
<p>by Leslie Lamport 1978</p>
<p><a href="https://lamport.azurewebsites.net/pubs/time-clocks.pdf">Link to paper</a></p>
<p>The seminal paper about <strong>logical clocks</strong> or <em>Lamport
clocks</em>. <em>Vector clocks</em>, a descendent of logical clocks, are one of
the main building blocks of today&rsquo;s distributed systems. They provide
means for <em>event ordering and synchronization</em> which are prerequisites
for modern NoSQL databases like <a href="https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf">Amazon
DynamoDB</a>.
. You can find a modern treatment about the topic from <a href="https://martinfowler.com/articles/patterns-of-distributed-systems/lamport-clock.html">Martin
Fowler</a>.</p>
<h6 id="span-stylecolor-bluethe-emperors-old-clothesspan"><span style="color: blue">The Emperor&rsquo;s Old Clothes</span></h6>
<p>by C.A.R Hoare 1980</p>
<p><a href="https://dl.acm.org/doi/pdf/10.1145/358549.358561">Link to paper</a></p>
<p>In Hoare&rsquo;s Turing lecture, he shares his experiences of designing and
implementing programming languages. He muses about his first Algol 60
compiler which was a great success. But his second project failed
miserably (maybe because of the <em>second system effect</em>?). It was never
delivered, even after years of delay. Failure was caused by well-known
product management issues: &ldquo;lack of software knowledge outside of the
programming group, interference from higher managers who imposed
decisions,&hellip; overoptimism in the face of pressure from customers and
the Sales Department&rdquo;. Eventually the project was reestablished and
saved by implementing agile principles like <em>early customer feedback</em>
and <em>incremental builds</em> - in the sixties 😂 :</p>
<blockquote>
<p>We assigned to each group of customers a small team of programmers
and told the team leader to visit the customers and find out what
they wanted; to select the easiest request to fulfil&hellip;</p>
</blockquote>
<p>At last, Hoare speaks about his frustrating experience with
programming languages committees and the never ending story of feature
bloat and negligence of simplicity which leads us to his most famous
quote:</p>
<blockquote>
<p>I conclude that there are two ways of constructing a software
design: One way is to make it so simple that there are obvious no
deficiencies and the other way is to make it so complicated that
there are not obvious deficiencies.</p>
</blockquote>
<p>I find it fascinating that his insights about building compilers are
not only apparent today but also apply to software product development
in general.</p>
<h6 id="span-stylecolor-bluereflections-on-trusting-trustspan"><span style="color: blue">Reflections on Trusting Trust</span></h6>
<p>by Ken Thomson 1984</p>
<p><a href="https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf">Link to paper</a></p>
<p>In his Turing Lecture Ken Thomson talks about trust:</p>
<blockquote>
<p>You can&rsquo;t trust code that you did not totally create
yourself. (Especially code from companies that employ people like me
(Ken Thomson).</p>
</blockquote>
<p>This applies especially to software libraries and tools like
compilers. In three stages he describes how to inject a <em>Trojan Horse</em>
into a compiler without leaving any traces in the source code. This is
possible due to re-compiling the compiler and removing the offensive
code but the binary is still infected and will inject the offensive
code for new compilations. It is hard to grasp but once you have it,
it is mind-bending.</p>
<p>Casually, Ken shows a beautiful
<a href="https://en.wikipedia.org/wiki/Quine_(computing)">Quine</a>, a program
that prints its own source code. Have you ever written one? Try it out
without looking to solutions - it&rsquo;s a enlightening experience.</p>
<h6 id="span-stylecolor-bluea-note-on-distributed-computingspan"><span style="color: blue">A Note on Distributed Computing</span></h6>
<p>by Jim Waldo, Geoff Wyant, Ann Wollrath, Sam Kendall 1994</p>
<p><a href="https://scholar.harvard.edu/files/waldo/files/waldo-94.pdf">Link to paper</a></p>
<p>Abstractions are not for free, often they are leaky, inappropriate or
just do more harm than good. This paper gives great insights why you
should not treat distributed computing as local computing. Hiding
distributed computing under local interfaces is a bad idea. Many
technologies failed, trying exactly that - remember SOAP Web Services, Corba, Java
EJBs and Java RMI.</p>
<p>Conclusion: one cannot hide the inherent issues of distributed
systems, namely <em>latency, concurrency, partial failure</em> etc. behind an
abstraction. Developers must always have those in mind and use
appropriate techniques in order to build robust and resilient
systems. It&rsquo;s good to see that old fashioned technologies like Corba
or Java RMI have &ldquo;lost&rdquo; and that
<a href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design#what-is-rest">REST</a>
and <a href="https://grpc.io/">gRPC</a> via HTTP are the predominant ways to
communicate today.</p>
<h6 id="span-stylecolor-bluea-plea-for-lean-softwarespan"><span style="color: blue">A Plea for Lean Software</span></h6>
<p>by Niklaus Wirth 1995</p>
<p><a href="https://cr.yp.to/bib/1995/wirth.pdf">Link to paper</a></p>
<p>Wirth elaborates about embracing <strong>simplicity</strong> and <strong>fighting
complexity</strong>, both traits mainly forgotten by today&rsquo;s developers and
customers. He makes a clear differentiation between <em>inherent</em>
complexity and <em>self-inflicted</em> complexity. The later is the main
reason for bulky software.</p>
<p>His insights about iterative software development, modularization and
the decomposition of complex systems are revolutionary. Especially
because those insights transition so well into the modern world with
microservices.</p>
<p>He proves his points with the <a href="https://en.wikipedia.org/wiki/Oberon_(operating_system)">Oberon
OS</a>, a
complete system written by him and his colleague in less then three
years. Compare this to <a href="https://en.wikipedia.org/wiki/IBM_System/360">IBM
OS/360</a>, a project with
five thousand man-years budget but infected with self-inflicted
complexity and feature bloat. Both projects consist of an OS and
additional tools like compiler, editor etc.</p>
<p>It is one of the best paper&rsquo;s ever written and makes you a better
programmer, simply because it changes your way of approaching big
software projects and makes you honor simplicity more than ever.</p>
<p>Wirth&rsquo;s paper is so full of gems, a selection of quotes:</p>
<blockquote>
<p>Truly good solutions emerge, after iterative improvements of after
redesigns that explicit new insights, and the most rewarding
iterations are those that result in programming simplifications.</p>
</blockquote>
<blockquote>
<p>The belief that complex systems require armies of designers and
programmers is wrong. A system that is not understood in its
entirety, or at least to a significant degree of detail by a single
individual, should probably not be built.</p>
</blockquote>
<blockquote>
<p>Communication problems grow as the size of the design team
grows. Whether they are obvious or not, when communication problems
dominate, the team the project are both in deep trouble.</p>
</blockquote>
<blockquote>
<p>To gain experience, there is no substitute for one&rsquo;s own programming
effort.</p>
</blockquote>
<h6 id="span-stylecolor-blueintroduction-to-functional-programmingspan"><span style="color: blue">Introduction to Functional Programming</span></h6>
<p>by Richard Bird, Philip Wadler 1998</p>
<p><a href="https://docs.google.com/viewer?a=v&amp;pid=sites&amp;srcid=ZGVmYXVsdGRvbWFpbnx0aGVhbnVqbWVodGF8Z3g6NzJiOTQ3YTVhODNlY2YyNg">Link to book</a></p>
<p>Alongside Fred Brooks <em>Mythical Man-Month</em>, this is the second book on
the list and it is the best introduction to functional programming,
period. In a way, it complements
<a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html">SICP</a>,
another classic and the best introduction to programming in general.</p>
<p>The book touches functional core concepts like immutable data
structures, lazy data structures, pure functions, function composition
and high-order functions like <em>map, filter, fold</em>. After reading the
book, you are well prepared for solving real world problems in a
functional way. With these new tools in your toolbox, you will be better
programmer and see the world differently.  For example, avoiding state
and side-effects, will make your code much more readable, more
composable, better testable and easier maintainable.</p>
<h6 id="span-stylecolor-blueout-of-the-tar-pitspan"><span style="color: blue">Out Of The Tar Pit</span></h6>
<p>by Ben Moseley, Peter Marks 2006</p>
<p><a href="http://curtclifton.net/papers/MoseleyMarks06a.pdf">Link to paper</a></p>
<p>This paper is a great elaboration about complexity, its causes and how
to manage it.</p>
<p>The authors distinguish between two types of complexity: <em>essential
complexity</em> and <em>accidental complexity</em>. The latter is the main reason
why systems are much more complex than necessary. Further they expose
<strong>state</strong> as another major cause for complexity, but also code volume
and the negligence of simplicity are main drivers.</p>
<p>Rings a bell? Today <em>avoiding state</em> is tantamount in Computer Science
to good, simple and scalable system design. Thinking of functional
programming, stateless microservices and HTTP as a stateless protocol.</p>
<h6 id="span-stylecolor-blueon-designing-and-deploying-internet-scale-servicesspan"><span style="color: blue">On Designing and Deploying Internet-Scale Services</span></h6>
<p>by James Hamilton 2007</p>
<p><a href="https://www.usenix.org/legacy/event/lisa07/tech/full_papers/hamilton/hamilton.pdf">Link to paper</a></p>
<p>Today, distributed systems are everywhere. With the raise of
ever-growing systems and new tools like Kubernetes, Containers and
Microservices, new best practices were needed. This paper is whirlwind
tour about best practices to build robust distributed systems in an
<em>operating-friendly</em> way. The author&rsquo;s experiences draw on building
the Microsoft Windows Live Services Platform.</p>
<p>The paper describes keystones like <em>redundancy, fault tolerance, build
for failure, avoid single point of failures, geo-distribution,
firedrills, fail fast</em> and many more. Without knowing it, he basically
describes the <strong>DevOps</strong> mindset:</p>
<blockquote>
<p>The trend we&rsquo;ve seen when looking across many services is that
low-cost administration correlates highly with how closely the
development, test and operations teams work together.</p>
</blockquote>
<blockquote>
<p>If development is frequently called in the middle of the night,
automation is the likely outcome. If operations is frequently
called, the usual reaction is to grow the operations team.</p>
</blockquote>
<p>I like his tendency to &ldquo;testing in production&rdquo; with permanent
firedrills and his meticulous attitude leaving nothing to chance:</p>
<blockquote>
<p>The general rule is that nothing works if it isn&rsquo;t tested
frequently.</p>
</blockquote>
<p>It is a great read, especially, if you consider to build
&ldquo;internet-scale&rdquo; systems. You find most of the advice in other
distributed system books but the paper provides them in a condensed
and terse way.</p>
<h5 id="more">More</h5>
<p>Interested in more? You can find a great and free collection
of literature at <em><a href="https://github.com/papers-we-love/papers-we-love">github/papers-
we-love</a></em>.</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/programming/" term="programming" label="programming" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Database Integration Tests with Docker Sidecar in Jenkins</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/it-test-db-sidecar-jenkins/" />
            <id>https://gerlacdt.github.io/posts/it-test-db-sidecar-jenkins/</id>
            <updated>2021-08-10T21:46:40+02:00</updated>
            <published>2021-05-09T08:00:00+02:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[More often than not, developers want to test the source code against a real database instead of Fakes or Test Doubles during a CI job in order to verify the code works as expected. Therefore a clean database is needed for every CI-job.]]></summary>
            
                <content type="html"><![CDATA[<p>More often than not, developers want to test the source code against a
real database instead of Fakes or Test Doubles during a CI job in
order to verify the code works as expected. Therefore a clean database
is needed for every CI-job. One solution is to use a shared instance
of the database in your existing test-environment which get cleaned
before and after a job. But this suffers from being &ldquo;shared&rdquo; and you
never can run multiple CI-jobs in parallel without jobs interfering
with each other.</p>
<p>A much better solution is to use the
<a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar">Sidecar-Pattern</a>
with <a href="https://docs.docker.com/">Docker</a>.</p>
<p>A sidecar is a specific docker container starting with the main CI-job
and provides specific functionality like a fresh database during the
test run. In a <code>Jenkinsfile</code> this is accomplished with:</p>
<p><code>docker.image(&lt;imagename&gt;.withRun(&lt;docker run parameters&gt;) {&lt;run your tests&gt;}</code></p>
<p>For more info about Docker, sidecars and Jenkins, see <a href="https://www.jenkins.io/doc/book/pipeline/docker/#running-sidecar-containers">Use Docker in
Jenkins
Pipelines</a></p>
<p>A full example of a Jenkinsfile with a Postgres-DB sidecar container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-groovy" data-lang="groovy"><span class="c1">// inside Jenkinsfile
</span><span class="c1"></span>
       <span class="n">stage</span><span class="o">(</span><span class="s1">&#39;Build and Unit Tests&#39;</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">script</span> <span class="o">{</span>
                    <span class="n">docker</span><span class="o">.</span><span class="na">image</span><span class="o">(</span><span class="s1">&#39;postgres:12.6&#39;</span><span class="o">)</span>
                          <span class="o">.</span><span class="na">withRun</span><span class="o">(</span><span class="s1">&#39;-P -v `pwd`/scripts/sql_init:/docker-entrypoint-initdb.d -e POSTGRESQL_PASSWORD=postgres&#39;</span><span class="o">)</span> <span class="o">{</span> <span class="n">c</span> <span class="o">-&gt;</span>

                        <span class="c1">// get random port from postgres-docker image
</span><span class="c1"></span>                        <span class="c1">// random ports are important for running multiple jobs in parallel because the jobs must not use the same port on the host
</span><span class="c1"></span>                        <span class="kt">def</span> <span class="n">port</span> <span class="o">=</span> <span class="n">sh</span><span class="o">(</span><span class="nl">returnStdout:</span> <span class="kc">true</span><span class="o">,</span> <span class="nl">script:</span> <span class="s2">&#34;docker inspect --format=&#39;{{(index (index .NetworkSettings.Ports \&#34;5432/tcp\&#34;) 0).HostPort}}&#39; ${c.id}&#34;</span><span class="o">).</span><span class="na">trim</span><span class="o">()</span>

                        <span class="c1">// Wait until postgres is up
</span><span class="c1"></span>                        <span class="n">sh</span> <span class="s2">&#34;while ! curl http://localhost:${port}/ 2&gt;&amp;1 | grep &#39;52&#39;; do echo &#39;waiting for postgres&#39;; sleep 1; done;&#34;</span>

                        <span class="c1">// access DB on localhost:${port}
</span><span class="c1"></span>                        <span class="c1">// e.g. run some database migrations
</span><span class="c1"></span>                        <span class="n">sh</span> <span class="s2">&#34;mvn -Dflyway.user=springboot -Dflyway.password=springboot \
</span><span class="s2">-Dflyway.url=jdbc:postgresql://localhost:${port}/&lt;dbname&gt; flyway:migrate&#34;</span>


                        <span class="c1">// or run some tests
</span><span class="c1"></span>                        <span class="n">sh</span> <span class="s2">&#34;SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:${port}/&lt;dbname&gt; mvn test&#34;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>This pattern is so successful that many libraries exist using this
pattern in order to provide Databases, Message Brokers and even Web
Browser as sidecars, e.g the Java library
<a href="https://www.testcontainers.org/">TestContainers</a>.</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/programming/" term="programming" label="programming" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/testing/" term="testing" label="testing" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/docker/" term="docker" label="docker" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/jenkins/" term="jenkins" label="jenkins" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Emacs as RSS reader</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/emacs-elfeed/" />
            <id>https://gerlacdt.github.io/posts/emacs-elfeed/</id>
            <updated>2020-10-10T20:28:19+02:00</updated>
            <published>2020-10-10T10:00:00+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Do you have a list of websites you visit regularly? Just to find out nothing new was added. This manual scraping is often a waste of time. Worse yet, scanning and filtering these websites for new interesting content is even more time consuming.]]></summary>
            
                <content type="html"><![CDATA[<p>Do you have a list of websites you visit regularly? Just to find out
nothing new was added. This manual scraping is often a waste of
time. Worse yet, scanning and filtering these websites for new
interesting content is even more time consuming.</p>
<p>Subscribing to an <a href="https://en.wikipedia.org/wiki/RSS">RSS feed</a> can
reduce your effort immensely. An RSS feed &ldquo;pushes&rdquo; the newest updates
to subscribers and they will never miss updates. In order to make use
of RSS feeds you need a &ldquo;feed reader&rdquo; or &ldquo;feed aggregator&rdquo;. Such a
feed reader will save you from visiting your favorite websites again
and again, so you can use your precious time more productively.</p>
<p><a href="https://www.gnu.org/software/emacs/">Emacs</a> is the epitome of
extensibility, and it&rsquo;s no surprise that Emacs makes also a great RSS
reader!  The <a href="https://github.com/skeeto/elfeed">elfeed</a> package turns
Emacs into a full-fledged feed reader which support multiple feeds,
searching, filtering and more.</p>
<p>The following shows a sample elfeed configuration with some
programming news subscriptions. elfeed will only download the last two
days of updates and mark them as unread.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-common-lisp" data-lang="common-lisp"><span class="c1">;; data is stored in ~/.elfeed</span>
<span class="p">(</span><span class="k">setq</span> <span class="nv">elfeed-feeds</span>
      <span class="o">&#39;</span><span class="p">(</span>
        <span class="c1">;; programming</span>
        <span class="p">(</span><span class="s">&#34;https://news.ycombinator.com/rss&#34;</span> <span class="nv">hacker</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.heise.de/developer/rss/news-atom.xml&#34;</span> <span class="nv">heise</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/programming.rss&#34;</span> <span class="nv">programming</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/emacs.rss&#34;</span> <span class="nv">emacs</span><span class="p">)</span>

        <span class="c1">;; programming languages</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/golang.rss&#34;</span> <span class="nv">golang</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/java.rss&#34;</span> <span class="nv">java</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/javascript.rss&#34;</span> <span class="nv">javascript</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/typescript.rss&#34;</span> <span class="nv">typescript</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/clojure.rss&#34;</span> <span class="nv">clojure</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/python.rss&#34;</span> <span class="nv">python</span><span class="p">)</span>

        <span class="c1">;; cloud</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/aws.rss&#34;</span> <span class="nv">aws</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/googlecloud.rss&#34;</span> <span class="nv">googlecloud</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/azure.rss&#34;</span> <span class="nv">azure</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/devops.rss&#34;</span> <span class="nv">devops</span><span class="p">)</span>
        <span class="p">(</span><span class="s">&#34;https://www.reddit.com/r/kubernetes.rss&#34;</span> <span class="nv">kubernetes</span><span class="p">)</span>
<span class="p">))</span>

<span class="p">(</span><span class="nv">setq-default</span> <span class="nv">elfeed-search-filter</span> <span class="s">&#34;@2-days-ago +unread&#34;</span><span class="p">)</span>
<span class="p">(</span><span class="nv">setq-default</span> <span class="nv">elfeed-search-title-max-width</span> <span class="mi">100</span><span class="p">)</span>
<span class="p">(</span><span class="nv">setq-default</span> <span class="nv">elfeed-search-title-min-width</span> <span class="mi">100</span><span class="p">)</span>

</code></pre></td></tr></table>
</div>
</div><p>A usual workflow looks like this:</p>
<ul>
<li>start <code>elfeed</code></li>
<li><code>G</code> fetches the newest RSS feed updates</li>
<li><code>s</code> filter for a specific topic like <code>java</code>, <code>golang</code> or <code>kubernetes</code></li>
<li><code>c</code> clears the search filter and shows everything again</li>
<li>navigate up and down with <code>n</code> (next line) and <code>p</code> (previous line)</li>
<li><code>b</code> open current url in your browser</li>
</ul>
<p>For a complete documentation visit the official elfeed page:
<a href="https://github.com/skeeto/elfeed">https://github.com/skeeto/elfeed</a></p>
<h3 id="screen-record">Screen record</h3>
<p><img src="/img/elfeed.gif" alt="elfeed"></p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/emacs/" term="emacs" label="emacs" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Product Management Quotes</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/product-management-quotes/" />
            <id>https://gerlacdt.github.io/posts/product-management-quotes/</id>
            <updated>2020-10-10T15:02:27+02:00</updated>
            <published>2020-10-08T10:00:00+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[I collected my favorite quotes about product management:
 We need teams of missionaries, not teams of mercenaries.
 Marty Cagan, Inspired
 It doesn’t matter how good your engineering team is if they are not given something worthwhile to build.
 Marty Cagan, Inspired]]></summary>
            
                <content type="html"><![CDATA[<p>I collected my favorite quotes about product management:</p>
<p><img src="/img/marty_cagan.jpg" alt="Marty Cagan"></p>
<blockquote>
<p>We need teams of missionaries, not teams of mercenaries.</p>
</blockquote>
<p>Marty Cagan, Inspired</p>
<blockquote>
<p>It doesn’t matter how good your engineering team is if they are not
given something worthwhile to build.</p>
</blockquote>
<p>Marty Cagan, Inspired</p>
<blockquote>
<p>The use of OKRs in most companies is a mess - because it’s a framework that originated in an empowered team environment - and most companies applying it today don’t have empowered teams.</p>
</blockquote>
<p>Marty Cagan</p>
<blockquote>
<p>As director of product you are only as strong as your weakest product manager.</p>
</blockquote>
<p>Marty Cagan</p>
<blockquote>
<p>The MVP should be a prototype, not a product.</p>
</blockquote>
<p>Marty Cagan, Inspired</p>
<blockquote>
<p>Be stubborn on vision but flexible on details.</p>
</blockquote>
<p>Jeff Bezos</p>
<blockquote>
<p>What&rsquo;s dangerous is not to evolve.</p>
</blockquote>
<p>Jeff Bezos</p>
<blockquote>
<p>We&rsquo;ve had three big ideas at Amazon that we&rsquo;ve stuck with for 18 years, and they&rsquo;re the reason we&rsquo;re successful: Put the customer first. Invent. And be patient.</p>
</blockquote>
<p>Jeff Bezos</p>
<blockquote>
<p>If you don&rsquo;t understand the details of your business you are going to
fail.</p>
</blockquote>
<p>Jeff Bezos</p>
<blockquote>
<p>The best customer service is if the customer doesn’t need to call you, doesn’t need to talk to you. It just works.</p>
</blockquote>
<p>Jeff Bezos</p>
<blockquote>
<p>No customer ever asked Amazon to create the Prime membership program.</p>
</blockquote>
<p>Jeff Bezos (myth that listen to your customers results in great products)</p>
<blockquote>
<p>We will continue to focus on hiring and retaining versatile and talented employees, and continue to weight their compensation to stock options rather than cash. We know our success will be largely affected by our ability to attract and retain a motivated employee base, each of whom must think like, and therefore must actually be, an owner.</p>
</blockquote>
<p>Jeff Bezos</p>
<blockquote>
<p>Good process serves you so you can serve customers. But if you’re not watchful, the process can become the thing. This can happen very easily in large organizations. You stop looking at outcomes and just make sure you’re doing the process right.</p>
</blockquote>
<p>Jeff Bezos</p>
<blockquote>
<p>The people who are crazy enough to think they can change the world are
the ones who do.</p>
</blockquote>
<p>Steve Jobs</p>
<blockquote>
<p>I’m as proud of many of the things we haven’t done as the things we have done. Innovation is saying no to a thousand things.</p>
</blockquote>
<p>Steve Jobs</p>
<blockquote>
<p>Innovation distinguishes between a leader and a follower.</p>
</blockquote>
<p>Steve Jobs</p>
<blockquote>
<p>Design is not just what it looks like and feels like. Design is how it
works.</p>
</blockquote>
<p>Steve Jobs</p>
<blockquote>
<p>&hellip;the people that make those decisions sometimes are confused&hellip;</p>
</blockquote>
<p>Steve Jobs about people in the enterprise and their buying decisions</p>
<blockquote>
<p>That’s been one of my mantras - focus and simplicity. Simple can be harder than complex; you have to work hard to get your thinking clean to make it simple.</p>
</blockquote>
<p>Steve Jobs</p>
<blockquote>
<p>The value is in what gets used, not in what gets built.</p>
</blockquote>
<p>Kris Gale</p>
<blockquote>
<p>If you are not embarrassed by the first version of your product, you’ve launched too late.</p>
</blockquote>
<p>Reid Hoffman</p>
<blockquote>
<p>The key is not to prioritize what’s on your schedule, but to schedule your priorities.</p>
</blockquote>
<p>Stephen Covey</p>
<blockquote>
<p>Your most unhappy customers are your greatest source of learning.</p>
</blockquote>
<p>Bill Gates</p>
<blockquote>
<p>Management is doing things right; leadership is doing the right
things.</p>
</blockquote>
<p>Peter Drucker</p>
<blockquote>
<p>Efficiency is doing things right; effectiveness is doing the right
things.</p>
</blockquote>
<p>Peter Drucker</p>
<blockquote>
<p>Strategy is a commodity, execution is an art.</p>
</blockquote>
<p>Peter Drucker</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/product/" term="product" label="product" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Writing better Code</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/writing-better-software/" />
            <id>https://gerlacdt.github.io/posts/writing-better-software/</id>
            <updated>2020-10-10T16:49:42+02:00</updated>
            <published>2020-08-16T18:38:45+02:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[In Joel Spolsky&rsquo;s blog post &ldquo;The Joel Test: 12 Steps to better Code&rdquo;, he describes a test composed of twelve simple yes-no questions. For a yes you get one point. 10 points are acceptable and 12 are perfect. If you have less than 10 points, you will get in trouble with your software &ndash; sooner or later.]]></summary>
            
                <content type="html"><![CDATA[<p>In Joel Spolsky&rsquo;s blog post <a href="https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/">&ldquo;The Joel Test: 12 Steps to better
Code&rdquo;</a>,
he describes a test composed of twelve simple yes-no questions. For a
<strong>yes</strong> you get one point. 10 points are acceptable and 12 are
perfect. If you have less than 10 points, you will get in trouble with
your software &ndash; sooner or later.</p>
<p>For a quick self-check, these are the original questions:</p>
<ol>
<li>Do you use source control?</li>
<li>Can you make a build in one step?</li>
<li>Do you make daily builds?</li>
<li>Do you have a bug database?</li>
<li>Do you fix bugs before writing new code?</li>
<li>Do you have an up-to-date schedule?</li>
<li>Do you have a spec?</li>
<li>Do programmers have quiet working conditions?</li>
<li>Do you use the best tools money can buy?</li>
<li>Do you have testers?</li>
<li>Do new candidates write code during their interview?</li>
<li>Do you do hallway usability testing?</li>
</ol>
<p>Although Joel&rsquo;s Test is still an excellent indicator for good software
development and engineering, 20 years have past and many game changing
technologies have emerged like mobile apps, the public cloud and in
general better tooling is available. The success of
<a href="https://git-scm.com/">git</a> and <a href="https://github.com/">github</a> changed
how we develop software. In this article I want to extend Joel&rsquo;s test
with contemporary questions:</p>
<ol start="13">
<li>Do you enforce a common code styleguide?</li>
<li>Do you write tests?</li>
<li>Do you conduct code reviews?</li>
<li>Do your developers write documentation?</li>
<li>Do you focus on code health?</li>
<li>Do you practice continuous integration?</li>
<li>Do you have a mentoring program?</li>
<li>Is your infrastructure reproducible?</li>
<li>Are you doing your best to keep your engineers?</li>
<li>Do you provide the best technology for your developers?</li>
<li>Do you focus on the four key metrics?</li>
<li>Do you empower your developers?</li>
</ol>
<p>The extended test consists of 24 yes-no questions. As with Joel&rsquo;s
Test, for a <strong>yes</strong> you get one point. The ranking is:</p>
<ul>
<li>&lt;= 20 points, you must improve</li>
<li>21 points, you are ok</li>
<li>22, 23 points, you are a high-performer</li>
<li>24 points, you are best-in-class</li>
</ul>
<p>Further I want to emphasis that <strong>sustainablity</strong> is my main intention
for the test. Many questions contribute directly or indirectly to a
sustainable and healthy codebase which is crucial for a successful
long-term software project and in general for a successful software
company. <a href="https://youtu.be/zW-i9eVGU_k?t=197">Titus Winters</a> defines a
sustainable codebase as:</p>
<blockquote>
<p>Your organization&rsquo;s codebase is sustainable when you are able to
change all of the things that you ought to change, safety, and can do
so for the lifetime of your codebase.</p>
</blockquote>
<h4 id="13-do-you-enforce-a-common-code-styleguide">13. Do you enforce a common code styleguide?</h4>
<p><strong>Consistency</strong> is one of the most important properties of a codebase.
It bolsters readability and maintainability which are essential for
sustainable code. A consistent codebase is easier to grasp and makes
onboarding new developers faster. New programmers are guided by the
prevailing style and can adapt quickly to it. Consistency is also an
indicator for coders' discipline, clearly you don&rsquo;t want to have dead
code, unused imports, wrong indentations, and other intricacies in
your codebase. The desired consistency can be achieved by a code
styleguide.</p>
<p>At best you enforce the rules of the styleguide via tooling like
static code analyzers, linters and autoformatting tools. Often these
tools are integrated into the build or are executed before a
commit. Further there are also manually measures like <a href="#codereview">code
reviews</a> to enforce a common style.</p>
<p>A consistent style increases productivity, e.g. linters prevent
sloppy programming errors, autoformatters leave no room for useless
(sometimes religious) discussions about indentation and formatting
rules. All code looks the same. Developers' taste and ego take a back
seat.</p>
<h4 id="14-do-you-write-tests">14. Do you write tests?</h4>
<p>Writing automatic test is a major trait of a sustainable
codebase. There are many kind of tests but the best known
classification comes with the <a href="https://martinfowler.com/articles/practical-test-pyramid.html">Test
Pyramid</a>.</p>
<ul>
<li>Unit Tests</li>
<li>Service Tests</li>
<li>User Interface Tests</li>
</ul>
<p>Particularly <strong>unit tests</strong> build the foundation and give developers
confidence to move fast and not to break existing functionality. Unit
testing is a major pillar of a fast feedback loop. This keeps
developers happy and the quality high. In general, tests act as a
safety net, prevent new bugs from being introduced and old bugs from
reoccurrence.</p>
<p>Without automatic tests your codebase will erode and only long-term
developers will be capable to make changes. Onboarding new developers
will take months or will never succeed at all. Over time developer
speed will slow down and finally come to a complete halt. Heavily
relying on manual testing before a release is a clear indicator of
missing automatic tests and extends the release cycle by days or
weeks. High performers deploy on a daily basis which is not possible
with manual testing phases. Therefore manual testing should be reduced
to a minimum or completely avoided.</p>
<p>Establishing a good testing culture is especially important. E.g.</p>
<ul>
<li>no code changes without a corresponding test</li>
<li>no bugfix without a test demonstrating the bug is indeed fixed</li>
<li>unit test should be fast, so developers run them continuously</li>
<li>unit test code coverage should be at a reasonable level like ~70%</li>
</ul>
<p>At Google, they practice the <a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/">Beyonce Rule &ldquo;If you liked it, you
shoulda put a test on
it!&quot;</a>
This rule inverts responsibility, e.g. if someone breaks a feature and
there was no test, the original author of the broken feature &ldquo;shoulda
put a test on it!&rdquo;.</p>
<h4 id="codereview">15. Do you conduct code reviews?</h4>
<p>Code reviews are a critical step in your software engineering
process. Not only they prevent entering bugs into your mainline but
they are a major tool for knowledge transfer, learning and mentoring.
The code review process fosters a common understanding between
reviewers and author and offers a platform for discussions about
trade-offs and design decisions. Reviews are not only focused on
correctness but also on readability, performance and other
non-functional properties.</p>
<p>All of that will lead to better solutions. Further reviewers practice
their code reading skill which is as important as code
writing. Besides compiling, linting and running tests, code reviews
form a major step in a developers feedback loop. Code should never be
committed into mainline without a proper code review.</p>
<p>Because code reviews can conjure up heated discussions, reviewers
should comply to some <a href="https://google.github.io/eng-practices/review/reviewer/">code review
guidelines</a>
in order to guarantee a flawless experience.</p>
<h4 id="16-do-developers-write-documentation">16. Do developers write documentation?</h4>
<p>Documentation starts with the code. Code comments or a good
description of a pull request are good examples. Thereby good
documentation focuses on <strong>why</strong> something was done. An extensive
<code>README.md</code> acts as the &ldquo;front-page&rdquo; of a project and should contain
its purpose and instructions for developers to set up their local
environment for development, e.g installing prerequisites, building
the project, running the tests.</p>
<p>Additionally a variety of documents with different purposes exist:</p>
<ul>
<li>Design Docs (showing alternative solutions, why was one approach
chosen over the others?)</li>
<li>Architecture Diagrams (System overview, showing coherence between
components)</li>
<li>Operational Playbooks for <a href="https://landing.google.com/sre/workbook/chapters/on-call/">Software Reliability Engineers
(SREs)</a>
(operational instructions for fighting outages)</li>
</ul>
<p>All these documents should be written by developers, operators or
other technical people. Living, up-to-date documentation makes a
project more understandable and long-term project members are capable
of answering questions why things were done in the past &ndash; in the
majority of projects, the top answer is &ldquo;this is historically grown&rdquo;.
The only way to get real insights is conducting time consuming
face-to-face interviews. Documentation helps to keep an overview over
an ever-growing project, to facilitate the start for new developers
and to build a searchable knowledge base. Past decisions should be
transparent through good documentation and not hidden in people&rsquo;s
heads.</p>
<h3 id="17-do-you-focus-on-code-health">17. Do you focus on code health?</h3>
<p>A healthy codebase is a major criteria for developer happiness. If
your developers working on a shitty codebase, they adapt to the poor
quality or leave. The existing codebase act as a <strong>role model</strong>. For
the purpose of high quality code, it is important to continuously
focus on code health. The best coders are repelled by bad code and
attracted by healthy code. But what is a healthy codebase?</p>
<p>A codebase is healthy when:</p>
<ul>
<li>you have fast builds</li>
<li>you have an easy development setup</li>
<li>you have fast and maintainable tests</li>
<li>you have clean, readable, loosely coupled and consistent code</li>
<li>you can easily debug the system</li>
<li>you continuously tackle technical debt</li>
</ul>
<p>You can find a much more exhaustive explanation of code health in
<a href="https://testing.googleblog.com/2016/08/hackable-projects.html">Google&rsquo;s Testing Blog about Code
Health</a>.</p>
<p>Signs of bad code are:</p>
<ul>
<li>complicated developer setup</li>
<li>hard to debug, missing monitoring, noisy garbage logs</li>
<li>long build times</li>
<li>inconsistent code (dead code, unused imports, different formatting
styles, no code styleguide)</li>
<li>large merge conflicts due to long running feature branches, broken mainline</li>
<li>no tests, flaky tests, hard-maintainable tests because of mocking overuse</li>
</ul>
<p>Never trade dirty code or workarounds due to time or release pressure
for code health. You will end up very badly in the long run. Worse
yet, you get in a vicious cycle because bad code slows you down and in
order to fulfil the next release you add more dirty workarounds. So
always prioritize code health, even when it looks counterintuitive at
first sight.</p>
<h3 id="18-do-you-practice-continuous-integration">18. Do you practice continuous integration?</h3>
<p>Nowadays Continuous Integration is hopefully commonplace. At best, you
work with trunk-based development and your mainline is always
releasable, preferably with feature toggles. Highest priority is to
keep the mainline green and a broken build should be fixed
immediately. Small and frequent releases prevent bugs or even outages
which happen when large releases are done only intermittently.</p>
<p>CI helps to prevent tedious merge conflict resolutions because your
developers regularly commit into mainline. Additionally you will get
rid of time consuming integration problems at the end of your
implementation phases.</p>
<p>&ldquo;Agile&rdquo;&rsquo;s main goal is to identify risks as early as possible and not
to postpone them till the end of a project. CI supports exactly
that. With CI, you will detect integration and design problems
early. This allows you to make course correction on the way.</p>
<h3 id="19-do-you-have-a-mentoring-program">19. Do you have a mentoring program?</h3>
<p>Mentoring is a great way to coach new employees. With a mentoring
program, you not only foster a consistent engineering culture with
best common practices like software methodologies, code styleguides,
code reviews, testing culture and other policies across the whole
organization but it is mandatory for molding new recruits into a
productive team.</p>
<p>Mentored developers are more likely to stay. They feel approved and
treated as first-class employees because you invest time and effort in
them from the beginning. It is a fantastic way to give raise to great
and loyal engineers.</p>
<h3 id="20-is-your-infrastructure-reproducible">20. Is your infrastructure reproducible?</h3>
<p>Today, public cloud providers like AWS and Azure provide APIs to
create, update and manage your infrastructure.  With the usage of
APIs, it is natural to store your whole <a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">Infrastructure as Code
(IaC)</a>.</p>
<p>Since we are speaking about code, all previous points apply for
infrastructure too. You should keep it under version control, conduct
code reviews, run tests in you CI pipeline and keep your codebase
clean via formating and linting tools. Known tools for infrastructure
are <a href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/">Kubernetes
manifests</a>,
<a href="https://helm.sh/">Helm charts</a>,
<a href="https://www.terraform.io/">Terraform</a> or <a href="https://aws.amazon.com/cloudformation/">AWS
Cloudformation</a>.</p>
<p>A good indicator if your infastructure is reproducable is how you
treat your servers, like <a href="http://www.pass.org/eventdownload.aspx?suid=1902">cattle or
pets</a>? Recreation of
a failing server should be easier than duct-taping a failing
one. Beware of <a href="https://martinfowler.com/bliki/SnowflakeServer.html">snowflake
servers</a>!</p>
<h3 id="keep">21. Are you doing your best to keep your engineers?</h3>
<blockquote>
<p>I&rsquo;ve built a lot of my success off finding these &ldquo;truly gifted&rdquo;
people, and not settling for &lsquo;B&rdquo; and &ldquo;C&rdquo; players, but really going
for the &ldquo;A&rdquo; players. &hellip; I found that when you get enough &ldquo;A&rdquo;
players together, when you go through the incredible work to find
five of these &ldquo;A&rdquo; players, they REALLY like working with each other
because they have never had a chance to do that before. And, they
don&rsquo;t want to work with &ldquo;B&rdquo; and &ldquo;C&rdquo; players, and so it becomes
self-policing, and they only want to hire more &ldquo;A&rdquo; players, so you
build up these pockets of &ldquo;A&rdquo; players, and it propagates &hellip;&quot;</p>
</blockquote>
<p>Steve Jobs</p>
<p>Hiring good engineers is very important but keeping them is too!  The
best engineering teams share a common mindset. Engineers want to work
with other engineers sharing the same interests and approaching the
same goals. This creates a virtuous circle, engineers motivate each
other in order to achieve the best possible outcomes. Be careful
though, a single new hire can disturb an A-player team&rsquo;s
balance. That&rsquo;s why the hiring process is very important.</p>
<p>You should treat your engineers as first-class employees. Companies,
recognizing their value, provide tech-specific careers with
compensations comparable to high-management salary level.</p>
<p>Further, engineering managers play an essential role to keep your
engineers (happy). They should know how to code and share the same
engineering mindset. If your engineering managers are not technical
skilled, your engineers will not take them seriously. Worse yet, they
will leave at some point in time because they feel misunderstood.</p>
<p>You should strive to hire A players and to keep them.</p>
<h3 id="22-do-you-provide-the-best-technology-for-your-developers">22. Do you provide the best technology for your developers?</h3>
<p>This points extends Joel&rsquo;s original ninth point &ldquo;Do you use the best
tools money can buy?&rdquo; Joel focused mainly on software tools running on
your local machine like IDEs, editors, compilers, debuggers and also
local hardware like a second monitor. All this make your programmers
happy and productive. While this is still true, nowadays it takes more
than local tooling to <em>keep</em> your developers happy.</p>
<p>A major pillar of productivity is going to the public cloud like
Amazon AWS or Microsoft Azure. Public clouds offer a great work
experience for your engineers. The self-service approach is
particularly important. Engineers can automate their application stack
via APIs and scripts, use the newest technology and operate the
complete system without writing tickets and getting approvals from
superiors. It enables your developers to take responsibility for the
full lifecyle of the application from design, to implementation, to
release and to operation. It&rsquo;s a great productivity booster. If you
cannot go to the public cloud due to legal or other restrictions,
beware of the <a href="https://architectelevator.com/cloud/enterprise-non-cloud/">on-prem enterprise
non-cloud</a>. The
<strong>enterprise non-cloud</strong> is a treacherous thing, it offers modern
software stacks like Kubernetes or Prometheus but is fails to deliver
the main advantages of the public cloud like real self-service with
APIs, elasticity, scalability and a pay-per-usage price model.</p>
<p>Other kind of tools are equally important, e.g. modern collaboration
tools like Google Docs or Office 365 which support parallel
collaboration at one document with multiple users, modern
communication tools like Slack and a contemporary version control
platform like <a href="https://github.com/">github</a> with integration for code
reviews, for CI pipelines and for the public cloud.</p>
<h3 id="23-do-you-focus-on-the-four-key-metrics">23. Do you focus on the four key metrics?</h3>
<p>The best way to measure if your engineering department is top-notch,
are the four key metrics, defined in fantastic book
<a href="https://itrevolution.com/book/accelerate/">Accelerate</a>.</p>
<p>High performers strive for:</p>
<ol>
<li>Short lead time</li>
<li>High deployment frequency</li>
<li>Short mean time to restore (MTTR)</li>
<li>Low change fail percentage</li>
</ol>
<p>Some of the above metrics seem contradictory like high deployment
frequency and low change fail percentage. But according to the studies
of the <a href="https://services.google.com/fh/files/misc/state-of-devops-2019.pdf">DevOps
Report</a>
the best companies perform in <strong>all</strong> key metrics excellently.</p>
<p>If you look for improvements, it is critical to focus on these four
key points permanently. Don&rsquo;t fall prey to expensive agile
transformation methodologies like SAFe. Usually they promise a magical
and fast performance boost but often the impact turns out as
insignificant or even worsens the situation.</p>
<h3 id="24-do-you-empower-your-developers">24. Do you empower your developers?</h3>
<p>Many companies treat their developers as pure delivery teams,
i.e. they are used to implement features based on roadmaps defined by
leadership and product management departments. Why this is a bad idea,
see <a href="https://svpg.com/product-fail/">Marty Cagan&rsquo;s post &ldquo;why products
fail?&quot;</a>. With this approach you only
getting half of their value. Further companies think developer teams
can be easily replaced or even outsourced. They are treated as
mercenaries but as we know from <a href="https://svpg.com/missionaries-vs-mercenaries/">John
Doerr</a></p>
<blockquote>
<p>we need teams of missionaries, not teams of mercenaries.</p>
</blockquote>
<p>But for an outsourced IT, it is almost impossible to work in
missionary mode.</p>
<p>In order to get the most of you developer teams, you must hire
missionaries and empower them. Empowered developers are first-class
employees. Your developers are the best source of innovation because
they know the enabling technology. But it is hard to attract, identify
and to keep top talent. See, how to hire (11. from Joel&rsquo;s test) and
<a href="#keep">keep the best</a>.</p>
<p>Empowered developers should not only implement predefined features
from stakeholders but are invited to come up with their own solutions
to satisfy the customer needs. Therefore we should give developers
<strong>problems</strong> to solve, not features to implement. It is mandatory that
developers understand the business context. A quick self-check if you
have empowered developers:</p>
<ul>
<li>Can developers identify themselves with the customers?</li>
<li>Do they attend user tests regularly?</li>
<li>At best, do your developers use the application themselves?</li>
<li>Do they know the pains of the customers or are they shielded away by
a wall of stakeholders, business departments, program managers and
never have the chance to get in contact with customers?</li>
<li>Do your developers drive their own features or do they only get them
at the sprint-planning?</li>
</ul>
<p>Finally empowered engineers means a mindset change in the whole
company, see <a href="https://svpg.com/keys-to-successful-transformation/">Marty
Cagan</a>:</p>
<blockquote>
<p>(the company is) moving from a model where the technology teams
exist to “serve the business” to one where they exist to “serve the
customers, in ways that work for the business.</p>
</blockquote>
<h3 id="conclusion">Conclusion</h3>
<p><strong>Digital</strong> companies like Google, Amazon, Facebook, Microsoft or
Netflix have these traits in their blood and they live by these
standards already for decades. For them, &ldquo;software&rdquo; is their core
product, they cannot afford piling up technical debt since they would
cripple and risk their own future. This is well understood by them. In
contrary to non-digital companies with oldschool enterprise IT
departments and outsourced IT.</p>
<p>Non-digital enterprises never considered &ldquo;software&rdquo; as a competitive
advantage. But slowly even they understand that <a href="https://a16z.com/2011/08/20/why-software-is-eating-the-world/">&ldquo;software eats the
world&rdquo;</a>
and they want to do develop software in-house again. In such
situations, missing know-how and &ldquo;wrong&rdquo; people with lack of skills
are common.  This article wants to be a simple and easy applicable
guideline for them to establish a good coding mentality and culture
with good practices. I hope you can apply the full test and gain some
insights about strengths, weaknesses and possible improvements in your
company or team.</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/programming/" term="programming" label="programming" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/softwareengineering/" term="softwareengineering" label="softwareengineering" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Google Testing Toilet Collection</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/google-testing-toilet/" />
            <id>https://gerlacdt.github.io/posts/google-testing-toilet/</id>
            <updated>2021-08-10T21:46:40+02:00</updated>
            <published>2020-05-23T08:00:00+02:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[In my one of my previous posts i wrote about Good Unit Tests. During my research i discovered the famous Google Testing on the Toilet posts which provide great advice. The Testing-on-the-Toilet articles are short (~3min reads) and give hands-on examples, ready to be applied immediately.]]></summary>
            
                <content type="html"><![CDATA[<p>In my one of my previous posts i wrote about <a href="http://gerlacdt.github.io/posts/unit-testing/">Good Unit
Tests</a>. During my
research i discovered the famous <a href="https://testing.googleblog.com/">Google Testing on the
Toilet</a> posts which provide great
advice. The Testing-on-the-Toilet articles are short (~3min reads) and
give hands-on examples, ready to be applied immediately. Here are my
favorites:</p>
<h3 id="testing-on-the-toilet">Testing on the Toilet</h3>
<ul>
<li>
<p><a href="https://testing.googleblog.com/2019/12/testing-on-toilet-tests-too-dry-make.html">Tests Too DRY? Make Them
DAMP!</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2018/11/testing-on-toilet-exercise-service-call.html">Exercise Service Call Contracts in Tests</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2018/06/testing-on-toilet-only-verify-relevant.html">Only Verify Relevant Method Arguments</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2018/06/testing-on-toilet-keep-tests-focused.html">Keep Tests Focused</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2018/02/testing-on-toilet-cleanly-create-test.html">Cleanly Create Test Data</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/12/testing-on-toilet-only-verify-state.html">Only Verify State-Changing Method Calls</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/01/testing-on-toilet-keep-cause-and-effect.html">Keep Cause and Effect Clear</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2016/09/testing-on-toilet-what-makes-good-end.html">What Makes a Good End-to-End Test?</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2014/03/testing-on-toilet-what-makes-good-test.html">What Makes a Good Test?</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html">Know Your Test Doubles</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html">Just Say No to More End-to-End Tests</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html">Don&rsquo;t overuse Mocks</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2015/01/testing-on-toilet-prefer-testing-public.html">Test Public APIs over implementation details</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2014/04/testing-on-toilet-test-behaviors-not.html">Test behaviors, not methods</a></p>
</li>
</ul>
<h3 id="code-health">Code Health</h3>
<p><a href="https://testing.googleblog.com/2017/04/code-health-googles-internal-code.html">Code
Health</a>
is a subseries of Googles Testing blog and contains fundamental wisdom
about keeping large codebases maintainable, readable and
&ldquo;healthy&rdquo;. Following these practices reduces complexity and
facilitates simplicity. As a consequence programming stays enjoyable
and developers productivity does not decay over time.</p>
<ul>
<li>
<p><a href="https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html">Code Health: Respectful Reviews == Useful
Reviews</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2018/07/code-health-make-interfaces-hard-to.html">Code Health: Make Interfaces Hard to
Misuse</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/11/obsessed-with-primitives.html">Code Health: Obsessed With
Primitives?</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/10/code-health-identifiernamingpostforworl.html">Code Health:
IdentifierNamingPostForWorldWideWebBlog</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/09/code-health-providing-context-with.html">Code Health: Providing Context with Commit Messages and Bug
Reports</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/08/code-health-eliminate-yagni-smells.html">Code Health: Eliminate YAGNI
Smells</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/07/code-health-to-comment-or-not-to-comment.html">Code Health: To Comment or Not to
Comment?</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-your.html">Code Health: Too Many Comments on Your Code
Reviews?</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2017/06/code-health-reduce-nesting-reduce.html">Code Health: Reduce Nesting, Reduce
Complexity</a></p>
</li>
</ul>
<h3 id="hackable-projects">Hackable projects</h3>
<p>Google defines &ldquo;hackable&rdquo; code as code which is &ldquo;nice to work on&rdquo;. In
this subseries they define the traits of healthy and likable projects.</p>
<ul>
<li>
<p><a href="https://testing.googleblog.com/2016/08/hackable-projects.html">Hackable Projects - Pillar 1: Code
Health</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2016/10/hackable-projects-pillar-2-debuggability.html">Hackable Projects - Pillar 2:
Debuggability</a></p>
</li>
<li>
<p><a href="https://testing.googleblog.com/2016/11/hackable-projects-pillar-3.html">Hackable Projects - Pillar 3:
Infrastructure</a></p>
</li>
</ul>
<h3 id="more-on-testing-and-code-health">More on testing and code health</h3>
<p>Are you interested in even more Google testing practices? I recommend
the great talk <a href="https://www.youtube.com/watch?v=u5senBJUkPc">&ldquo;All Your Tests are
Terrible&hellip;&quot;</a> from <a href="https://twitter.com/tituswinters">Titus
Winters</a> and <a href="https://twitter.com/hyrumwright">Hyrum
Wright</a>, both are co-authors of the
<a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/">#FlamingoBook</a>
which gives deep insights in Google&rsquo;s software engineering
practices. Hyrum has even his own law named after him &ndash; <a href="https://www.hyrumslaw.com/">Hyrum&rsquo;s
Law</a>.</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/programming/" term="programming" label="programming" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/testing/" term="testing" label="testing" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Programming Quotes</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/programming-quotes/" />
            <id>https://gerlacdt.github.io/posts/programming-quotes/</id>
            <updated>2020-10-10T15:02:27+02:00</updated>
            <published>2020-05-17T08:00:00+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Over the years i collected some (funny) programming quotes. Lean back and enjoy:
 Everyone knows that debugging is twice as hard as writing a program in the first place. So if you&rsquo;re as clever as you can be when you write it, how will you ever debug it?]]></summary>
            
                <content type="html"><![CDATA[<p>Over the years i collected some (funny) programming quotes. Lean back and enjoy:</p>
<p><img src="/img/kernighan.jpg" alt="Brian Kernighan"></p>
<blockquote>
<p>Everyone knows that debugging is twice as hard as writing a program in the first place. So if you&rsquo;re as clever as you can be when you write it, how will you ever debug it?</p>
</blockquote>
<p>Brian W. Kernighan</p>
<blockquote>
<p>Don’t comment bad code—rewrite it.</p>
</blockquote>
<p>Brian W. Kernighan</p>
<blockquote>
<p>The most effective debugging tool is still careful thought, coupled with judiciously placed print statements.</p>
</blockquote>
<p>Brian W. Kernighan</p>
<blockquote>
<p>90% of the functionality delivered now is better than 100% delivered never.</p>
</blockquote>
<p>Kernighan &amp; Plauger</p>
<blockquote>
<p>C is quirky, flawed, and an enormous success.</p>
</blockquote>
<p>Dennis Ritchie</p>
<blockquote>
<p>There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.</p>
</blockquote>
<p>C.A.R. Hoare</p>
<blockquote>
<p>What one programmer can do in one month, two programmers can do in two months.&quot;</p>
</blockquote>
<p>Fred Brooks</p>
<blockquote>
<p>Nine women can&rsquo;t make a baby in one month.</p>
</blockquote>
<p>Fred Brooks</p>
<blockquote>
<p>Good judgement is the result of experience … Experience is the result of bad judgement.</p>
</blockquote>
<p>Fred Brooks</p>
<blockquote>
<p>Before software can be reusable it first has to be usable.</p>
</blockquote>
<p>Ralph Johnson</p>
<blockquote>
<p>You can have the project: Done On Time. Done On Budget. Done Properly - Pick two.</p>
</blockquote>
<p>Unknown</p>
<blockquote>
<p>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.</p>
</blockquote>
<p>Martin Fowler</p>
<blockquote>
<p>Expert programmers know how to choose the level of abstraction appropriate to their task.</p>
</blockquote>
<p>Structure and Interpretation of Computer Programs, by Abelson, Sussman, and Sussman</p>
<blockquote>
<p>When one teaches, two learn.</p>
</blockquote>
<p>Robert Heinlein</p>
<blockquote>
<p>Weeks of coding can save you hours of planning.</p>
</blockquote>
<p>Unknown</p>
<blockquote>
<p>Theory is when you know something, but it doesn’t work. Practice is when something works, but you don’t know why. Programmers combine theory and practice: Nothing works and they don’t know why.</p>
</blockquote>
<p>Unknown</p>
<blockquote>
<p>One of my most productive days was throwing away 1000 lines of code.</p>
</blockquote>
<p>Ken Thompson</p>
<blockquote>
<p>A primary cause of complexity is that software vendors uncritically adopt almost any feature that users want.</p>
</blockquote>
<p>Niklaus Wirth</p>
<blockquote>
<p>The craft of programming begins with empathy, not formatting or languages or tools or algorithms or data structures.</p>
</blockquote>
<p>Kent Beck</p>
<blockquote>
<p>I bought my boss two copies of The Mythical Man Month so that he could read it twice as fast.</p>
</blockquote>
<p><a href="https://twitter.com/rkoutnik">https://twitter.com/rkoutnik</a></p>
<blockquote>
<p>There&rsquo;s nothing more permanent than a temporary hack.</p>
</blockquote>
<p>Kyle Simpson</p>
<blockquote>
<p>The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.</p>
</blockquote>
<p>John Johnson</p>
<blockquote>
<p>Program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.</p>
</blockquote>
<p>Edsger Dijkstra</p>
<blockquote>
<p>Simplicity is a prerequisite for reliability.</p>
</blockquote>
<p>Edsger Dijkstra</p>
<blockquote>
<p>No matter how slow you are writing clean code, you will always be slower if you make a mess.</p>
</blockquote>
<p>Uncle Bob Martin</p>
<blockquote>
<p>First, solve the problem. Then, write the code.</p>
</blockquote>
<p>John Johnson</p>
<blockquote>
<p>We sort of understood abstractly the idea that there are only two kinds of software projects: failures and future legacy horrors.</p>
</blockquote>
<p>Peter Weinberger</p>
<blockquote>
<p>Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.</p>
</blockquote>
<p>Eric S. Raymond</p>
<blockquote>
<p>Programs must be written for people to read, and only incidentally for machines to execute.</p>
</blockquote>
<p>Harold Abelson &amp; Gerald Jay Sussman</p>
<blockquote>
<p>Programming is not about typing, it&rsquo;s about thinking.</p>
</blockquote>
<p>Rich Hickey</p>
<blockquote>
<p>Measuring programming progress by lines of code is like measuring aircraft building progress by weight.</p>
</blockquote>
<p>Bill Gates</p>
<blockquote>
<p>Be careful about using the following code — I’ve only proven that it works, I haven’t tested it.</p>
</blockquote>
<p>Donald Knuth</p>
<blockquote>
<p>Thinking doesn’t guarantee that we won’t make mistakes. But not thinking guarantees that we will.</p>
</blockquote>
<p>Leslie Lamport</p>
<blockquote>
<p>Debugging is like being the detective in a crime movie where you are also the murderer.</p>
</blockquote>
<p>Filipe Fortes</p>
<blockquote>
<p>Good specifications will always improve programmer productivity far better than any programming tool or technique.</p>
</blockquote>
<p>Milt Bryce</p>
<blockquote>
<p>Programming can be fun, so can cryptography; however they should not be combined.</p>
</blockquote>
<p>Kreitzberg &amp; Shneiderman</p>
<blockquote>
<p>The purpose of software engineering is to control complexity, not to create it.</p>
</blockquote>
<p>Pamela Zave</p>
<blockquote>
<p>The best programs are the ones written when the programmer is supposed to be working on something else.</p>
</blockquote>
<p>Melinda Varian</p>
<blockquote>
<p>&ldquo;How did you know so much about computers?”</p>
<p>&ldquo;I didn’t, it was the first one.”</p>
</blockquote>
<p>Grace Hopper on Letterman</p>
<blockquote>
<p>One accurate measurement is worth a thousand expert opinions.</p>
</blockquote>
<p>Grace Hopper</p>
<blockquote>
<p>People have an enormous tendency to resist change. They love to say, &lsquo;We&rsquo;ve always done it this way.&rsquo; I try to fight that.</p>
</blockquote>
<p>Grace Hopper</p>
<blockquote>
<p>There are a million ways to lose a work day, but not even a single way to get one back.</p>
</blockquote>
<p>Tom DeMarco</p>
<blockquote>
<p>The sooner you start to code, the longer the program will take.</p>
</blockquote>
<p>Roy Carlson</p>
<blockquote>
<p>Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.</p>
</blockquote>
<p>Alan Perlis</p>
<blockquote>
<p>There are two ways to write error-free programs; only the third one works.</p>
</blockquote>
<p>Alan J. Perlis</p>
<blockquote>
<p>Don’t worry about what anyone else is going to do. The best way to predict the future is to invent it.</p>
</blockquote>
<p>Alan Kay</p>
<blockquote>
<p>Make it correct, make it clear, make it concise, make it fast. In that order.</p>
</blockquote>
<p>Wes Dyer</p>
<blockquote>
<p>For every complex problem, there is a solution that is simple, neat, and wrong.</p>
</blockquote>
<p>H.L Mencken</p>
<blockquote>
<p>The best way to get the right answer on the internet is not to ask a question; it’s to post the wrong answer.</p>
</blockquote>
<p>Cunningham’s Law</p>
<blockquote>
<p>Give someone a program, you frustrate them for a day; teach them how to program, you frustrate them for a lifetime.</p>
</blockquote>
<p>David Leinweber</p>
<blockquote>
<p>If you don’t actively attack the risks, the risks will actively attack you.</p>
</blockquote>
<p>Tom Gilb</p>
<blockquote>
<p>Projects without clear goals will not achieve their goal clearly.</p>
</blockquote>
<p>Tom Gilb</p>
<blockquote>
<p>Java is to Javascript what Car is to Carpet.</p>
</blockquote>
<p>Chris Heilmann</p>
<blockquote>
<p>If it doesn’t work, it doesn’t matter how fast it doesn’t work.</p>
</blockquote>
<p>Mich Ravera</p>
<blockquote>
<p>Today, most software exists, not to solve a problem, but to interface with other software.</p>
</blockquote>
<p>I.O. Angell</p>
<blockquote>
<p>I love deadlines. I like the whooshing sound they make as they fly by.</p>
</blockquote>
<p>Douglas Adams</p>
<blockquote>
<p>There are only two kinds of languages: the ones people complain about and the ones nobody uses.</p>
</blockquote>
<p>Bjarne Stroustrup</p>
<blockquote>
<p>The most important single aspect of software development is to be clear about what you are trying to build.</p>
</blockquote>
<p>Bjarne Stroustrup</p>
<blockquote>
<p>I have always wished for my computer to be as easy to use as my telephone; my wish has come true because I can no longer figure out how to use my telephone.</p>
</blockquote>
<p>Bjarne Stroustrup</p>
<blockquote>
<p>It is far, far easier to make a correct program fast than it is to make a fast program correct.</p>
</blockquote>
<p>Herb Sutter</p>
<blockquote>
<p>Anyone could learn Lisp in one day, except that if they already knew Fortran, it would take three days.</p>
</blockquote>
<p>Marvin Minsky</p>
<blockquote>
<p>&ldquo;When debugging, novices insert corrective code; experts remove defective code.&rdquo;</p>
</blockquote>
<p>Richard Pattis</p>
<blockquote>
<p>10 lines of code = 10 issues.</p>
<p>500 lines of code = &ldquo;looks fine.&rdquo;</p>
</blockquote>
<p>Code reviews.
<a href="https://twitter.com/iamdevloper/status/397664295875805184">https://twitter.com/iamdevloper/status/397664295875805184</a></p>
<blockquote>
<p>&ldquo;Typescript is hugely helpful when you&rsquo;re working on a big team.&rdquo;</p>
<p>&ldquo;How big?&rdquo;</p>
<p>&ldquo;More than yourself.&rdquo;</p>
</blockquote>
<p><a href="https://twitter.com/jessitron/status/914017624996171776">https://twitter.com/jessitron/status/914017624996171776</a></p>
<blockquote>
<p>Walking on water and developing software from a specification are easy if both are frozen.</p>
</blockquote>
<p>Edward V Berard</p>
<blockquote>
<p>In order to understand recursion, one must first understand recursion.</p>
</blockquote>
<p>Anonymous</p>
<blockquote>
<p>Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.</p>
</blockquote>
<p>Martin Golding</p>
<blockquote>
<p>A good programmer looks both ways before crossing a one-way street.</p>
</blockquote>
<p>Anonymous</p>
<blockquote>
<p>Just don’t create a file called -rf.</p>
</blockquote>
<p>Larry Wall</p>
<blockquote>
<p>You want it in one line? Does it have to fit in 80 columns?</p>
</blockquote>
<p>Larry Wall</p>
<blockquote>
<p>Linux is only free if your time has no value.</p>
</blockquote>
<p>Jamie Zawinski</p>
<blockquote>
<p>Never trust a computer you can’t throw out a window.</p>
</blockquote>
<p>Steve Wozniak</p>
<blockquote>
<p>A good way to stay flexible is to write less code.</p>
</blockquote>
<p>Pragmatic Programmer</p>
<blockquote>
<p>Code never lies, comments sometimes do.</p>
</blockquote>
<p>Ron Jeffries</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/programming/" term="programming" label="programming" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Why and How to write better Unit Tests</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/unit-testing/" />
            <id>https://gerlacdt.github.io/posts/unit-testing/</id>
            <updated>2021-08-10T21:46:40+02:00</updated>
            <published>2020-05-04T08:08:00+02:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[TL;DR  Good unit tests build the foundation of a maintainable and high-quality codebase Unit Tests should help developers to be productive Unit Tests should be fast Unit Tests should be isolated Unit Tests should be deterministic Unit Tests should focus on a single unit Unit Tests should be enduring Unit Tests should be clear, concise and complete  Avoid complex control flow logic like nested ifs or loops Unit Tests should follow a consistent naming pattern like UnitName_StateUnderTest_ExpectedBehavior Unit Tests should comply to a consistent structure Unit Tests should be DAMP not DRY   Unit Tests should give developers confidence to deploy and to refactor Test Doubles help to make tests fast and deterministic The overuse of Mocking makes test hard to read and brittle Prefer state verification over interaction verification Prevent brittle tests Prevent flaky tests Read more:  Software Engineering at Google Kent Becks&rsquo;s Programmer Test Principles Microsoft&rsquo;s Best Practices for Unit testing    Why good unit tests are important TDD and test engineering culture is considered best practice these days.]]></summary>
            
                <content type="html"><![CDATA[<!-- [tldr](#tldr)  this is cross-reference inside the document-->
<h3 id="tldr">TL;DR</h3>
<ul>
<li>Good unit tests build the foundation of a maintainable and high-quality
codebase</li>
<li>Unit Tests should help developers to be productive</li>
<li>Unit Tests should be fast</li>
<li>Unit Tests should be isolated</li>
<li>Unit Tests should be deterministic</li>
<li>Unit Tests should focus on a single unit</li>
<li>Unit Tests should be enduring</li>
<li>Unit Tests should be clear, concise and complete
<ul>
<li>Avoid complex control flow logic like nested ifs or loops</li>
<li>Unit Tests should follow a consistent naming pattern like <em>UnitName_StateUnderTest_ExpectedBehavior</em></li>
<li>Unit Tests should comply to a consistent structure</li>
<li>Unit Tests should be <a href="https://testing.googleblog.com/2019/12/testing-on-toilet-tests-too-dry-make.html">DAMP not
DRY</a></li>
</ul>
</li>
<li>Unit Tests should give developers confidence to deploy and to refactor</li>
<li>Test Doubles help to make tests fast and deterministic</li>
<li>The overuse of Mocking makes test hard to read and brittle</li>
<li>Prefer state verification over interaction verification</li>
<li>Prevent brittle tests</li>
<li>Prevent flaky tests</li>
<li>Read more:
<ul>
<li><a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/">Software Engineering at Google</a></li>
<li><a href="https://medium.com/@kentbeck_7670/programmer-test-principles-d01c064d7934">Kent Becks&rsquo;s Programmer Test
Principles</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices">Microsoft&rsquo;s Best Practices for Unit
testing</a></li>
</ul>
</li>
</ul>
<h3 id="why-good-unit-tests-are-important">Why good unit tests are important</h3>
<p>TDD and test engineering culture is considered best practice these
days. Alas, I often encounter projects without tests or with bad
tests. Maybe you experienced this yourself, you changed something in a
specific part of the system and suddenly a lot of unrelated tests
fail. Congratulations, you made the acquaintance of <strong>brittle</strong> tests.
This is not only annoying for developers but also a time killer.
Another kind of bad tests are <strong>flaky</strong> tests. They are
non-deterministic due to relying on remote systems, making network
calls or accessing remote databases. This causes tests to randomly
succeed or fail even when production code has not changed.</p>
<p>Both, brittle and flaky, tests are a serious problems in a codebase
and should be shunned. Otherwise they will succumb progressively more
and more time and effort of the developers. Finally developers are
kept busy with repairing broken tests and productivity suffers. This
can happen in disguise and developers are not even aware of the
problem. In some companies test coverage is treated as a key
metric. Hence if the coverage high, nobody will question the current
situation. Maybe the whole involved team is proud of the high
coverage, not recognizing their real problem.</p>
<p>Maintainable, fast and deterministic unit tests build the foundation
of a sustainable codebase. But unit tests alone are not enough to
guarantee a usable, successful and bug-free application. Additionally
you need system and UI tests in order to verify production
readiness. The <strong>test pyramid</strong> visualizes this.</p>
<img src="/img/test_pyramid.png" alt="https://stackoverflow.com/questions/56696132/why-is-ui-testing-at-the-top-of-the-test-pyramid" class="medium-zoom-image" width="300">
<p>System tests and UI tests are good to check your product as a whole,
but these tests are slow, flaky, not repeatable and often are
conducted manually which makes them bad candidates for <a href="https://martinfowler.com/books/continuousDelivery.html">continuous
integration and
delivery</a>. If
system tests fail, it is hard for developers to locate the problem
because the scope of a system test is very broad and not as focused as
in a unit test. Relying heavily in a project on manual regression
testing instead of an exhaustive, automatic test suite is an
anti-pattern, the <strong>test ice cone</strong>. It is the inverse of the test
pyramid and leads to an unsustainable codebase because failing system
tests leave developers in the dark about the root cause and drain
their productivity. Did you ever work in a project with a Jira Board,
cluttered with unresolved Bugs in the backlog? &ndash; all bugs found by
so-called manual QAs or testers.</p>
<img src="/img/ice_cone.jpg" alt="https://watirmelon.blog/testing-pyramids/" class="medium-zoom-image" width="300">
<p>In this article I will focus on unit tests. Good unit tests should be
clean, maintainable and most notably &ldquo;useful&rdquo; for developers. The main
purpose of tests is to save time for developers and keep the code
quality high. But careless use of testing can have negative effects on
productivity and code quality. E.g if developers loose a majority of
their time fixing tests instead of building new features. &ldquo;Wrong&rdquo;
testing can result in a system that requires even more effort to
maintain than without tests and takes more effort to change without
actually improving confidence in the next production release. It is
crucial to identify bad tests and to know how to write good tests.</p>
<p>This blog post is built upon the shoulder of giants. Basically I draw
from the fantastic book <a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/">Software Engineering at
Google</a>
. Especially from Chapter 12 &ldquo;Unit Testing&rdquo;. I was also heavily
inspired by the article about <a href="https://medium.com/@kentbeck_7670/programmer-test-principles-d01c064d7934">Programmer Test
Principles</a>
from Kent Beck, the father of TDD.</p>
<h3 id="test-doubles">Test Doubles</h3>
<p><strong>Test Doubles</strong> play a crucial part in writing good unit tests, we&rsquo;ll
see soon. But first, let&rsquo;s define what a Test Double is. A Test Double
is a replacement of a production code class or function. Multiple
types of Test Doubles exist. In my opinion, the three most important
ones are:</p>
<ul>
<li>A <strong>Fake</strong> is a simplified implementation of a given interface, for
example a <em>FakeUserRepository</em> &ldquo;fakes&rdquo; the real database repository
behaviour with an in-memory Hashmap. A Fake is used interchangeably
with a real implementation and is typically applied via dependency
injection.</li>
<li>A <strong>Stub</strong> returns predefined, hard-coded values to specific calls
which are internally needed by the <strong>SUT</strong> (System Under Test) to
fulfill the tested behaviour.</li>
<li>A <strong>Mock</strong> is a stub, but additionally checks the interactions of
the mock with its environment. For example, was the mock called with
the expected parameters or was the mocked method called an expected
number of times? Checking the interactions of mocks is also called
<a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/"><strong>interaction
testing</strong></a>.
Naturally both, Stubbing and Mocking, is realized via
mock-frameworks.</li>
</ul>
<p>An exhaustive list of Test Double types can be found in <a href="https://martinfowler.com/bliki/TestDouble.html">Martin
Fowler&rsquo;s article</a>.</p>
<p>The following is a fake implementation of a UserRepository. An
in-memory Hashmap replaces a real database. The Fake can be used by a
unit test via dependency injection. There will be a relevant example
with an example usage later on.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// Fake example
</span><span class="c1"></span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>


<span class="c1">// Fakes the UserRepository interface with a HashMap implementation
</span><span class="c1"></span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FakeUserRepository</span> <span class="kd">implements</span> <span class="n">UserRepository</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">users</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The next example shows a simple mock which stubs a method of the
UserRepository. Without the interaction verification at the end of the
test, the mock would be a simple stub.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// Mock example
</span><span class="c1"></span>
<span class="kn">import static</span> <span class="nn">org.mockito.Mockito.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceMockTest</span> <span class="o">{</span>

    <span class="n">UserRepository</span> <span class="n">mockUserRepository</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">UserRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="c1">// dependency injection
</span><span class="c1"></span>    <span class="n">UserService</span> <span class="n">sut</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">mockUserRepository</span><span class="o">);</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getUser_ReturnUser</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">);</span>
        <span class="n">when</span><span class="o">(</span><span class="n">mockUserRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">anyString</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="c1">// stubbing
</span><span class="c1"></span>
        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="n">assertEquals</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="c1">// verify interaction
</span><span class="c1"></span>        <span class="c1">// check that findById() was called with the correct parameter and exactly once
</span><span class="c1"></span>        <span class="n">verify</span><span class="o">(</span><span class="n">mockUserRepository</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="n">1</span><span class="o">)).</span><span class="na">findById</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="what-makes-a-good-unit-test">What makes a good unit test?</h3>
<p>There are a lot of opinions floating around about how to write good
unit tests. In the following I list the traits which I consider most
important.</p>
<h5 id="tests-should-be-fast">Tests should be fast</h5>
<p>A useful test suite will be run frequently, sometimes multiple times a
minute, and therefore must be fast, i.e. a few seconds at
most. Loosing focus during the run is unwanted because it decreases
productivity and breaks the flow. Further if unit tests are slow,
developers will not run tests regularly or skip running them
completely. Then tests will loose their purpose, namely providing fast
feedback. Martin Fowler speaks of a <strong><a href="https://martinfowler.com/bliki/UnitTest.html">compile suite and a commit
suite</a></strong>. Normally
developers work on a specific part or unit of a system like a single
file or class. With every compilation, they only run the related tests
to get feedback as fast as possible. Hence this group of tests is the
&ldquo;compile suite&rdquo;. The compile suite comprises the smallest set of tests
which verify the correctness of the unit of the system which is
currently worked on. After finishing a feature or bugfix, before
committing, all unit tests are run to check if nothing else is
broken. Hence this group of tests is called the &ldquo;commit suite&rdquo;.</p>
<p>The optimal duration of a unit test is in the nanosecond
range. Hundred milliseconds sounds fast for a single unit test but it
is too slow if you think about a project with multiple thousand
tests. All tests would take minutes to complete. A developer will only
reluctantly wait or even worse he will skip running the tests.</p>
<p>Tests, relying on network calls, database queries or time related
logic, are inherently slow. Test Doubles are a mechanism to make tests
fast and reliable. With a Test Double you <em>inject</em> a fake
implementation replacing the database or HTTP call. This technique is
well known as <a href="https://martinfowler.com/articles/injection.html#InversionOfControl">Dependency
Injection</a>.</p>
<p>In the code block below the UserService uses the UserRepository to
carry out the intended business logic. A real UserRepository talks
naturally to a database and is too slow for a unit test. Here the real
database implementation is substituted with a FakeUserRepository from
above.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>

    <span class="c1">// test double
</span><span class="c1"></span>    <span class="n">UserRepository</span> <span class="n">fakeUserRepository</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FakeUserRepository</span><span class="o">();</span>

    <span class="c1">// dependency injection
</span><span class="c1"></span>    <span class="n">UserService</span> <span class="n">sut</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">fakeUserRepository</span><span class="o">);</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerUser_validUser_success</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;foobar&#34;</span><span class="o">);</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">sut</span><span class="o">.</span><span class="na">registerUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">u</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">u</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="tests-should-be-isolated">Tests should be isolated</h5>
<p>Tests should be independent from each other. It must be possible to
run the tests in any order, concurrently and in parallel. This becomes
especially important when the project is big and contains thousand of
tests. In order to speed up the build, the workload can be distributed
across different machines. The distribution logic is very simple if
the tests are isolated. Contrary, it would be very hard or even
impossible to distribute tests which make up a complex dependency
graph. Further any single unit test should be able to run alone
without depending on other unit tests, files, network I/O, and
databases.</p>
<p>Below there is an example of a bad unit test. The second test depends
on the first one and it will fail if the first test did not run
before or failed. Not only this eradicates the possibility to
distribute the tests but also developers will have a hard time to
figure out the root cause of the potential error. Did the second test
fail because of itself or because of the test before?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// BAD
</span><span class="c1">// tests depend on each other and cannot run in random order or concurrently
</span><span class="c1"></span>
<span class="nd">@TestMethodOrder</span><span class="o">(</span><span class="n">MethodOrderer</span><span class="o">.</span><span class="na">OrderAnnotation</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankAccountServiceOrderedTest</span> <span class="o">{</span>

    <span class="n">BankAccountService</span> <span class="n">sut</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BankAccountService</span><span class="o">();</span>
    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">);</span>

    <span class="nd">@Test</span>
    <span class="nd">@Order</span><span class="o">(</span><span class="n">1</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createAccount_validUser_ok</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">sut</span><span class="o">.</span><span class="na">createAccount</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="kt">boolean</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">hasAccount</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">assertTrue</span><span class="o">(</span><span class="n">actual</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@Order</span><span class="o">(</span><span class="n">2</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deposit_100Dollars_ok</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">Integer</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">Integer</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="n">Integer</span> <span class="n">expected</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>The second example shows two independent tests. The small cost of
adding 2-3 lines per tests is more than acceptable.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// GOOD
</span><span class="c1">// tests can run in random order and concurrently
</span><span class="c1"></span>
<span class="nd">@TestMethodOrder</span><span class="o">(</span><span class="n">MethodOrderer</span><span class="o">.</span><span class="na">Random</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankAccountServiceTest</span> <span class="o">{</span>

    <span class="n">BankAccountService</span> <span class="n">sut</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BankAccountService</span><span class="o">();</span>

    <span class="nd">@BeforeEach</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">sut</span><span class="o">.</span><span class="na">resetAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deposit_100Dollars_ok</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">);</span>
        <span class="n">sut</span><span class="o">.</span><span class="na">createAccount</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">Integer</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">Integer</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="n">Integer</span> <span class="n">expected</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">withdraw_50Dollars_ok</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">);</span>
        <span class="n">sut</span><span class="o">.</span><span class="na">createAccount</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">sut</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">100</span><span class="o">);</span>
        <span class="n">Integer</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">50</span><span class="o">;</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">Integer</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="n">Integer</span> <span class="n">expected</span> <span class="o">=</span> <span class="n">50</span><span class="o">;</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="tests-should-be-deterministic">Tests should be deterministic</h5>
<p>A deterministic test never changes its outcome when there was no
change of behaviour. A test switching from green to red or the other
way around without any change is called flaky. Test Doubles are a good
way to get rid of flaky dependencies like external network or database
calls. The earlier example with the FakeUserRepository demonstrates
this.</p>
<h5 id="tests-should-focus-on-a-single-unit-of-the-system">Tests should focus on a single unit of the system</h5>
<p>A unit test should focus on a single part of the system. If a unit
tests breaks, it should be easy to find the root cause. The other way
around is also true: If someone changes a unit, only corresponding
unit tests should possibly break. If you need to start a debugger to
figure out what went wrong, the chance is high that your tests are too
diffuse and include much more than a single unit.</p>
<p>Unit tests which not focus on a single unit tend to be brittle because
they will fail if some other part of the system changes. Brittle tests
are a serious problem because developers loose trust in the test suite
and they neglect badly needed refactorings. This hampers
maintainability and causes the quality of the codebase to
degrade. More often than not, in many projects existing unit tests are
more a burden than a backing for the developers.</p>
<p>Often there is a misunderstanding of what &ldquo;focus on one unit&rdquo; exactly
means. Here the two types of testing, the <a href="https://martinfowler.com/articles/mocksArentStubs.html#ClassicalAndMockistTesting">classic testing and the
mockist
testing</a>,
come into play. The &ldquo;mockists&rdquo; are very strict and mock all
dependencies. The mock-everything approach isolates the test from the
rest of the world but comes with major disadvantages. First, the unit
tests are polluted with various mock-statements which makes the real
test logic hard to understand. And second, with mocking the
dependencies, you expose the internals of the unit. This is a major
bummer because once the internals are exposed, future refactorings are
impossible without breaking a majority of existing tests. The &ldquo;classic
tester&rdquo; avoid mocks and use Fakes or real implementations for
dependencies. Hence the internals are kept hidden and refactorings are
still possible.</p>
<p>You can find a great definition about &ldquo;focus on a single unit&rdquo; in the
book <a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/">Software Engineering at
Google</a>:</p>
<blockquote>
<p>It’s important to note that when we talk about unit tests as being narrowly scoped, we’re referring to the code that is being validated, not the code that is being executed.</p>
</blockquote>
<h5 id="tests-should-be-enduring">Tests should be enduring</h5>
<p>Strive for unchangeable tests. A test should be written once and never
be touched except there is a change of behaviour in the corresponding
unit. Changes of internals should never break a test if the behaviour
stays the same. Like I mentioned earlier these are brittle tests. We
should prevent them at any cost.</p>
<p>Brittle tests can creep into the codebase because of the overuse of
mocks. Mocks verify if specific methods get called. Hence mocks know
about the internal implementation which makes the tests prone to
failures. If the internal implementation changes, you need to adjust
all tests which use related mocks. In large codebases this means a lot
of effort.</p>
<p>Test only <em>public</em> methods. I often see developers who test private
methods. Therefore they make them public or protected. This
contradicts the concept of information hiding and low coupling. Then
you expose the internals of a unit which makes it impossible to switch
the internal implementation without breaking a majority of
tests. Additionally, you crippled the module&rsquo;s contract and swamped
its interface with confusing public methods which should be private.</p>
<h5 id="tests-should-be-clear-concise-and-complete">Tests should be clear, concise and complete</h5>
<p>A test should be clear, concise and complete. What does that mean
exactly? A clear test is easy to read and to understand. Tests should
not include complex logic like nested if-conditions or complicated
loops. A clear test is a simple sequence of expressions without any
branching. Consistency is critical. All tests in a project should
comply to a common structure like <em>arrange-act-assert</em> or
<em>given-when-then</em>. A consistent structure reduces cognitive load and
gives developers, unfamiliar with the codebase, a prescriptive model
how a test should look like. A consistent naming pattern adds clarity
and bolsters readability. A collection of common patterns can be found
<a href="https://dzone.com/articles/7-popular-unit-test-naming">here</a>. My
preferred one is <code>UnitName_StateUnderTest_ExpectedBehavior</code>.  Rich
failure messages are important too. A message with a detailed context
where and why the test failed, reduces debugging effort
immensely. According to
<a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices">Microsoft</a>
you should create a separate test for each assertion. In case of a
test failure, a single assertion helps to demystify the error. Most
testing-frameworks anyway stop during the first assertion error per
test. At best, a visible correlation from the test name to the
assertion statement exist. Multiple assertions could be useful though
for asserting multiple attributes of a complex object or checking
expected side-effects.</p>
<p>The following test shows one good assertion and some
unnecessary ones:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PaymentServiceTest</span> <span class="o">{</span>

    <span class="n">PaymentService</span> <span class="n">sut</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentService</span><span class="o">(</span><span class="k">new</span> <span class="n">PaymentGateway</span><span class="o">());</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;payment with valid user&#34;</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">pay_validUser_success</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setHasValidCreditCard</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">750</span><span class="o">;</span>
        <span class="n">PaymentRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentRequest</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">PaymentResponse</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">pay</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="c1">// GOOD one assert is enough to cover the test case
</span><span class="c1"></span>        <span class="kt">boolean</span> <span class="n">expected</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">());</span>

        <span class="c1">// BAD
</span><span class="c1"></span>        <span class="c1">// unnecessary over-assertion
</span><span class="c1"></span>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedReason</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">getReason</span><span class="o">());</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedStateOfSUT</span><span class="o">,</span> <span class="n">sut</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expectedOther</span><span class="o">,</span> <span class="n">otherStuffNonRelatedToTest</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Completeness and conciseness contradict themselves. A good test finds
a balance of both. The highest priority is readability though which is
fostered by completeness. A <em>complete</em> test contains all dependencies,
pre-configured objects and data needed to run the test. The apt
developer must resist the urge to make the test too DRY (Don&rsquo;t Repeat
Yourself). DRY code scatters important shared logic and hurts
readability. Relying too much on shared helper classes and functions
reduces the amount of code but increases coupling and makes tests
brittle. <a href="https://testing.googleblog.com/2019/12/testing-on-toilet-tests-too-dry-make.html">Google&rsquo;s Testing on the Toilet
Blog</a>
favors the <strong>DAMP</strong> principle (<em>Descriptive And Meaningful Phrases</em>)
over the DRY principle for tests. A little duplication improves
comprehension and should be preferred over uniqueness. If you think
complete tests are too verbose or your tests require lots of setup
code, it could be an indicator that your production code is flawed and
you should rethink your overall design.</p>
<p>The following examples show a test in a DRY and a DAMP version. The
DRY version uses shared helper functions like <code>createUsers()</code> or
<code>validate()</code> with unclear semantics. The DAMP version replaces these
magical functions with a simple constructor call and an assertion
statement.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">
<span class="c1">// BAD
</span><span class="c1"></span>
<span class="c1">// test is too DRY
</span><span class="c1"></span>
<span class="c1">// What kind of users will be created by the createUsers() function?
</span><span class="c1">// What will be asserted by the validate() function?
</span><span class="c1"></span>
<span class="kd">class</span> <span class="nc">PaymentServiceDRYTest</span> <span class="o">{</span>

    <span class="c1">// magical helper function
</span><span class="c1"></span>    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">createUsers</span><span class="o">();</span> <span class="c1">// how many users will be created?
</span><span class="c1"></span>
    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;payment with valid user&#34;</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">pay_validUser_success</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">PaymentService</span> <span class="n">sut</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentService</span><span class="o">(</span><span class="k">new</span> <span class="n">PaymentGateway</span><span class="o">());</span>

        <span class="c1">// BAD
</span><span class="c1"></span>        <span class="c1">// which user in the list is a valid one?
</span><span class="c1"></span>        <span class="n">PaymentRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentRequest</span><span class="o">(</span><span class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">),</span> <span class="n">750</span><span class="o">);</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">PaymentResponse</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">pay</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="c1">// magical helper function
</span><span class="c1"></span>        <span class="n">validate</span><span class="o">(</span><span class="n">actual</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>  <span class="c1">// what are these parameters?
</span><span class="c1"></span>
        <span class="c1">// validate() is used in other contexts too
</span><span class="c1"></span>        <span class="c1">// the three parameters are: validate(actual, expected, errorMessage)
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// GOOD
</span><span class="c1"></span>
<span class="c1">// Test is DAMP
</span><span class="c1"></span>
<span class="c1">// all information needed for the test are inside the test
</span><span class="c1"></span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PaymentServiceDAMPTest</span> <span class="o">{</span>

    <span class="n">PaymentService</span> <span class="n">sut</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentService</span><span class="o">(</span><span class="k">new</span> <span class="n">PaymentGateway</span><span class="o">());</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;payment with valid user&#34;</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">pay_validUser_success</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;userId&#34;</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setHasValidCreditCard</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">750</span><span class="o">;</span>
        <span class="n">PaymentRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentRequest</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">PaymentResponse</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">pay</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="kt">boolean</span> <span class="n">expected</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Nevertheless conciseness is important too and must not be neglected. A
deliberate usage of shared helpers makes this possible. For example,
after calling the helper function you could explicitly set the needed
properties for the test on the returned object. So you utilize the
shared helper function but also decouple the test from it. Further the
relevant properties, needed by the test, are made prominent and the
test will be stable even if someone changes the helper logic. The
example below illustrates that.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">// BAD use of shared helper function.
</span><span class="c1"></span>
<span class="c1">// We don&#39;t know about the properties of the created user.
</span><span class="c1"></span>
<span class="c1">// If someone changes createDefaultUser(), the test could break.
</span><span class="c1"></span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">pay_validUser_success3</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">createDefaultUser</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">750</span><span class="o">;</span>
        <span class="n">PaymentRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentRequest</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">PaymentResponse</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">pay</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="kt">boolean</span> <span class="n">expected</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">
<span class="c1">// GOOD use of shared helper function.
</span><span class="c1"></span>
<span class="c1">// Set properties which matter for the test explicitly.
</span><span class="c1"></span>
<span class="c1">// Test is complete.
</span><span class="c1">// You understand the test without checking createDefaultUser().
</span><span class="c1">// Even if someone changes createDefaultUser(), the test will be ok.
</span><span class="c1"></span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">pay_validUser_success2</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange
</span><span class="c1"></span>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">createDefaultUser</span><span class="o">();</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setHasValidCreditCard</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">750</span><span class="o">;</span>
        <span class="n">PaymentRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentRequest</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>

        <span class="c1">// act
</span><span class="c1"></span>        <span class="n">PaymentResponse</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="na">pay</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>

        <span class="c1">// assert
</span><span class="c1"></span>        <span class="kt">boolean</span> <span class="n">expected</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="tests-should-give-you-confidence-and-a-good-feeling">Tests should give you confidence (and a good feeling)</h5>
<p>Finally your test suite should give you confidence that your code
changes are correct and you did not break anything. A green suite is
an indicator that you can deploy to production without worries. Green
tests should give the individual developer a good feeling about his
code changes. Thereby tests act as a productivity booster so you can
make changes faster and deliver features in less time &ndash; always
feeling good at it.</p>
<h4 id="the-fallacy-of-mocking">The Fallacy Of Mocking</h4>
<p>We learned that mocks make unit tests fast and deterministic. They
prevent flaky tests because they replace unstable calls or slow
network calls with predefined, hard-coded behaviour. There is a catch
though. The overuse of mocking or stubbing has a negative effect on
your test code quality:</p>
<ol>
<li>
<p>Tests become unclear because mock statements bloat the code and
make the test hard to comprehend. The maintainability of your test
code suffers.</p>
</li>
<li>
<p>Tests become brittle. The more you mock, the more internals of the
SUT are leaked. Changing the internals, even without changing the
behaviour of the SUT, could make the test fail which contradicts
the principle of enduring tests.</p>
</li>
<li>
<p>A need of too many mocks could be an indicator of bad design. Most
probably the SUT has too many dependencies and responsibilities and
should be divided.</p>
</li>
</ol>
<p><a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/">Google</a>
also warns about the overuse of mock-frameworks and interaction
testing. Nevertheless interaction testing is sometimes the only way
to check the code correctness. For example in order to check a
caching logic, you need to call a function twice. First to get object
and to fill the cache, second to get the object from the cache. Both
returned objects are indistinguishable. The only way to verify that
the second object was retrieved from the cache is to check if the
cache was called. Another insight from Google is that they prefer
<em>Fakes over Mocks</em>. Fakes are not that intrusive and the test code is
not swamped by stubbing-behaviour statements.</p>
<h4 id="final-words">Final words</h4>
<p>I know some presented traits are idealistic. Ideals are often hard or
even impossible to achieve. Nevertheless these &ldquo;ideals&rdquo; should serve
you as a guide star. I hope you gained some new insights and
understand that good unit tests play a crucial part for a successful
software project. Especially identifying good and bad tests is
important, so you do not fall into the trap of brittle or flaky
tests. Eventually tests exist to make the life of developers
easier. When tests do not increase productivity, confidence and code
quality, they failed their purpose. I also hope that I could eliminate
some fallacies about mocking or that chasing a 100% code coverage is
nonsense. As long developers feel confident about their codebase and
refactorings are done regularly everything is fine.</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/programming/" term="programming" label="programming" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/testing/" term="testing" label="testing" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ESlint &#43; Prettier &#43; Typescript = Consistency</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/eslint-prettier-typescript/" />
            <id>https://gerlacdt.github.io/posts/eslint-prettier-typescript/</id>
            <updated>2020-10-10T15:02:27+02:00</updated>
            <published>2020-03-24T10:28:27+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Consistency is one of the most important factors in a codebase. It gives new developers an orientation and direction how to write new code. It keeps the code understandable, clear and free from bikeshedding, so developers can focus on real problems instead of indulging in discussions on their preferred codestyle and individual taste.]]></summary>
            
                <content type="html"><![CDATA[<p>Consistency is one of the most important factors in a codebase. It
gives new developers an orientation and direction how to write new
code. It keeps the code understandable, clear and free from
bikeshedding, so developers can focus on real problems instead of
indulging in discussions on their preferred codestyle and individual
taste.</p>
<p>Consistency can be pertained by strict discipline but if possible you
should enforce good style and formatting via opinionated code
formatters like <a href="https://prettier.io">Prettier</a> which makes
development and collaboration a breeze. One of the forerunners of code
formatters was <a href="https://golang.org/cmd/gofmt">gofmt</a>. Prior to gofmt
opinionated formatters were not so popular (at least not to my
knowledge). Basically gofmt defines the de facto Go formatting
style. The result of <em>gofmt</em>: almost all serious Go code is formatted
the same way. That&rsquo;s why all Go code looks familiar and is easy to
work with. With Prettier you can achieve the same &ldquo;feeling&rdquo; with
Javascript, Typescript and many other supported languages.</p>
<p>The same is true for linters. They help you to comply with common best
practices and to avoid potential problems. Linters and code formatters
are essential tools for <strong>state-of-the-art software engineering</strong>.</p>
<h5 id="setup-eslint-and-prettier">Setup ESLint and Prettier</h5>
<p>I will show you how to setup <a href="https://eslint.org/">ESlint</a> for
<a href="https://www.typescriptlang.org/">Typescript</a> with Prettier
support. So let&rsquo;s start. First you need to install ESlint in your
(Typescript) project:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># install eslint with typescript support</span>
npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin

<span class="c1"># install prettier and eslint plugin with for prettier support</span>
npm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier
</code></pre></td></tr></table>
</div>
</div><p>Next we have to configure ESlint so that it works together with
Prettier. Some ESlint rules are not compatible with the Prettier
formatting by default. ESlint is configured via two files
<code>.eslintrc.js</code> and <code>.eslintignore</code>. Both files need to be created in
your project root.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// .eslintrc.js
</span><span class="c1"></span>
<span class="c1">// configures eslint rules
</span><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">env</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">node</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nx">parser</span><span class="o">:</span> <span class="s2">&#34;@typescript-eslint/parser&#34;</span><span class="p">,</span>
  <span class="kr">extends</span><span class="o">:</span> <span class="p">[</span>
    <span class="s2">&#34;plugin:@typescript-eslint/recommended&#34;</span><span class="p">,</span> <span class="c1">// recommended eslint rules for typescript
</span><span class="c1"></span>    <span class="s2">&#34;prettier/@typescript-eslint&#34;</span><span class="p">,</span> <span class="c1">// make eslint compatible with prettier formatting
</span><span class="c1"></span>    <span class="s2">&#34;plugin:prettier/recommended&#34;</span><span class="p">,</span> <span class="c1">// eslint shows prettier formatting warnings. Must be always the last configuration.
</span><span class="c1"></span>  <span class="p">],</span>
  <span class="nx">parserOptions</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">ecmaVersion</span><span class="o">:</span> <span class="mi">2018</span><span class="p">,</span>
    <span class="nx">sourceType</span><span class="o">:</span> <span class="s2">&#34;module&#34;</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;@typescript-eslint&#34;</span><span class="p">],</span>
  <span class="nx">rules</span><span class="o">:</span> <span class="p">{},</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># .eslintignore</span>

<span class="c1"># you should ignore irrelevant *.js and *.ts files which do not belong to you project</span>

<span class="c1"># do not lint node_modules/</span>
node_modules
<span class="c1"># do not lint build/ or dist/ folder</span>
dist
<span class="c1"># do not lint coverage/ folder</span>
coverage
</code></pre></td></tr></table>
</div>
</div><p>The Prettier configuration file is <code>.prettierrc</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;printWidth&#34;</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span>
  <span class="nt">&#34;trailingComma&#34;</span><span class="p">:</span> <span class="s2">&#34;all&#34;</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Here we define a maximum line length of 80. I am also an advocate of
trailing commas. This setting keeps the git diffs clean and as small
as possible. You can find more in-depth information about Prettier
configuration <a href="https://prettier.io/docs/en/configuration.html">here</a>.</p>
<p>With all this in place you can lint and format your code base:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># lint src files and list all errors</span>
node_modules/.bin/eslint src/ --ext .ts

<span class="c1"># same as above but fixes problems automatically if possible</span>
node_modules/.bin/eslint src/ --ext .ts --fix

<span class="c1"># format codebase in place</span>
node_modules/.bin/prettier --trailing-comma all --write <span class="s1">&#39;src/**/*.ts&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>In the above code block, we had to use the path to the local
<em>node_modules/</em> folder, otherwise the ESlint and prettier binaries
would not be found. I recommend to install Prettier and ESlint as
global npm modules, then you can use them directly. This enables
editors to leverage prettier and ESlint too. You are then able to
incorporate both tools in your usual workflow. For example, i
configured my editor to show ESlint errors during typing and
formatting is done automatically when I save the current file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># install globally</span>
npm install -g prettier eslint

<span class="c1"># now you can use</span>
prettier --trailing-comma all --write <span class="s1">&#39;src/**/*.ts&#39;</span>
eslint src/ --ext .ts --fix
</code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s good practice to enforce these rules in order to preserve
consistency with a git pre-commit hook. Just install
<a href="https://www.npmjs.com/package/husky">husky</a> and
<a href="https://www.npmjs.com/package/lint-staged">lint-staged</a> for this
purpose. They facilitate the configuration of git hooks, so you do not
have to write the corresponding <code>pre-commmit</code> hook manually.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># install npm packages to manage git commit hooks</span>
npm install --save-dev lint-staged husky
</code></pre></td></tr></table>
</div>
</div><p>After the installation you need configure husky and lint-staged
modules in your local project&rsquo;s <code>package.json</code>. In this example, I run
<code>eslint --fix</code> and <code>prettier --write</code> during a pre-commit for all
changed files. This makes sure that no inconsistent code will ever be
committed to your codebase.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;lint&#34;</span><span class="p">:</span> <span class="s2">&#34;eslint src/ --ext .ts&#34;</span><span class="p">,</span>
    <span class="nt">&#34;lint-fix&#34;</span><span class="p">:</span> <span class="s2">&#34;eslint src/ --ext .ts --fix&#34;</span><span class="p">,</span>
    <span class="nt">&#34;pretty&#34;</span><span class="p">:</span> <span class="s2">&#34;prettier --trailing-comma all --write &#39;src/**/*.ts&#39;&#34;</span>
  <span class="p">},</span>
  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="err">...</span>
  <span class="p">},</span>
  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
     <span class="err">...</span>
  <span class="p">},</span>
  <span class="nt">&#34;husky&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;hooks&#34;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&#34;pre-commit&#34;</span><span class="p">:</span> <span class="s2">&#34;lint-staged&#34;</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="nt">&#34;lint-staged&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;src/**/*.ts&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="s2">&#34;eslint --fix&#34;</span><span class="p">,</span>
      <span class="s2">&#34;prettier --write&#34;</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>You can find a fully configured project template on my
<a href="https://github.com/gerlacdt/graphql-example">github</a>.</p>
<h5 id="one-more-word-about-consistency">One more word about consistency</h5>
<p>I can only emphasize once more that consistency is one of the most
important characteristics of a good codebase. Especially if your
project has multiple contributors but even if you work
alone. Consistency keeps the code maintainable and helps to keep up
high quality.</p>
<p>When I start working in a new team on a existing codebase, the first
thing I do is checking the codebase regarding consistency. Is the
formatting always the same? Is immutability preferred? Are threads or
asynchronous programming with callbacks used? Or promises? Or
<em>async-await</em>? Can I see re-emergent patterns? Are class, function and
variable names consistent? Is Domain Driven Design used?</p>
<p>The main point is that consistency should be apparent across the whole
codebase and that new team members are able to deduct how code should
look like. <em>The existing codebase acts like a model</em>. For example if
you are in doubt how to write a new controller with a repository, the
following question should be answerable from the existent code: Do
other controllers exist which act as a template?  Do all controllers
comply to the same patterns?  Do they have the same annotations?  Do
they use the same dependency injection methods like constructors,
setters, or field injection?  Are all controllers tested the same way?
Do controllers have the same tests like unit and component tests? If
the model is inconsistent or askew, new team members are left in
uncertainty. They never know if they comply to existing coding
guidelines because the guidelines are not visible in the source code
itself. Even if they are visible but exceptions exist, it is hard for
an outsider to decide what is right. In bad projects, i encountered
lengthy coding guidelines in Confluence but the real code diverged a
long time ago from these written guidelines. The best guidelines and
rules are often deducible from the existing code. Another thing you
want to avoid due to lacking consistency is time consuming and
exhausting discussions in pull requests. To avoid senseless work, be
consistent all the time with your rules and guidelines and stick to
them. Whenever you can enforce them or check them automatically, do
it. It will save you a lot of time.</p>
<h3 id="final-words">Final words</h3>
<p>By now, you went through a lot of project setup effort and learned
about the importance of consistency. But if you apply consistency with
linters and automatic code formatters, you will have great tools which
help you to write better code.</p>
<p>When you first time run a linter on your project, do not worry if you
encounter hundreds of warnings. This is normal, just get rid of them
step-by-step, e.g. reduce the number of lint-warnings with every pull
request.</p>
<p>I hope, I could convince you that consistency matters. And that the
winning trio with ESlint, Prettier and Typescript improves your
codebase.</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/programming/" term="programming" label="programming" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Install Postgres on Ubuntu</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/postgres-ubuntu/" />
            <id>https://gerlacdt.github.io/posts/postgres-ubuntu/</id>
            <updated>2020-03-26T21:48:57+01:00</updated>
            <published>2019-07-26T10:15:34+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Recently i decided to switch from MacOS to Linux. I was already an Ubuntu user from 2006 till 2015. So i am used to Linux. Nevertheless i struggled a little bit with the installation of PostgreSQL. For MacOS there is a nice all-in-one package which i recommend: Postgres.]]></summary>
            
                <content type="html"><![CDATA[<p>Recently i decided to switch from MacOS to Linux. I was already an
Ubuntu user from 2006 till 2015. So i am used to Linux. Nevertheless i
struggled a little bit with the installation of
<a href="https://www.postgresql.org">PostgreSQL</a>. For MacOS there is a nice
all-in-one package which i recommend:
<a href="https://postgresapp.com">Postgres.app</a>. Everything works
out-of-the-box there. In Ubuntu, on the other hand, we need to adjust
the default installation a little bit in order to start application
development.</p>
<p>In this little guide i want to give you a short description how to
setup PostgreSQL for <a href="https://ubuntu.com">Ubuntu 19.04</a> for
development. For the impatient i compiled all important commands at
the end of this article. So if you are already familiar with Linux you
can skip the main part.  Keep in mind this guide is not for production
usage!</p>
<h2 id="installation-instructions">Installation instructions</h2>
<p>First install the deb-package via apt-get:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt-get install postgresql
</code></pre></td></tr></table>
</div>
</div><p>Afterwards PostgreSQL is available on your system. During the
installation a postgres OS-user with database admin permissions is
added to your system. And here is the problem.  For local users <a href="https://www.postgresql.org/docs/11/auth-peer.html">peer
authentication</a> is
activated by default. This means Postgres relies on OS-users for
authentication. You have to issue all commands with the <strong>postgres</strong>
OS-user from the shell. For development purposes this is cumbersome
and you want a normal <a href="https://www.postgresql.org/docs/11/auth-password.html">user/password
authentication</a>.
Hence you need to add a password to your existing postgres user:</p>
<pre><code># login with the postgres OS-user (this user has db-admin permissions and can create new users and databases)
sudo -u postgres psql

# now you can add a password in the psql-shell
psql&gt; \password postgres
</code></pre><p>Now you can switch from &ldquo;peer&rdquo; authentication to &ldquo;md5&rdquo; authentication
which is the Postgres version of password authentication.  Change all
occurrences of &ldquo;peer&rdquo; to &ldquo;md5&rdquo; in the &ldquo;Method&rdquo;-column in
<a href="https://www.postgresql.org/docs/11/auth-pg-hba-conf.html">/etc/postgresql/11/main/pg_hba.conf</a>. Your
<strong>pg_hba.conf</strong> file should look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1">##### file: /etc/postgresql/11/main/pg_hba.conf #####</span>

<span class="nb">local</span>   all             postgres             md5

<span class="c1"># TYPE  DATABASE        USER  ADDRESS        METHOD</span>

<span class="c1"># &#34;local&#34; is for Unix domain socket connections only</span>
<span class="nb">local</span>   all             all                  md5

<span class="c1"># IPv4 local connections:</span>
host    all             all   127.0.0.1/32   md5

<span class="c1"># IPv6 local connections:</span>
host    all             all   ::1/128        md5

<span class="c1"># Allow replication connections from localhost, by</span>
a user with the replication privilege.
<span class="nb">local</span>   replication     all                  md5
host    replication     all   127.0.0.1/32   md5
host    replication     all   ::1/128       md5
<span class="c1">##### file: /etc/postgresql/11/main/pg_hba.conf #####</span>

</code></pre></td></tr></table>
</div>
</div><p>To activate the changes restart the postgres server:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo service postgresql restart
</code></pre></td></tr></table>
</div>
</div><p>You are almost ready to go! Login with your new password:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">psql -U postgres
<span class="c1"># alternatively PGPASSWORD=&lt;your_password&gt; psql -U postgres</span>
<span class="c1"># -&gt; this version is better for scripting</span>

<span class="c1"># create your application user with a password. Never use the admin user for application development!</span>
psql&gt; CREATE USER myuser WITH ENCRYPTED PASSWORD <span class="s1">&#39;foobar&#39;</span><span class="p">;</span>

<span class="c1"># create a new database</span>
psql&gt; CREATE DATABASE mydb<span class="p">;</span>

<span class="c1"># add privileges to your new db-user, so he is allowed to create,change and delete tables etc.</span>
psql&gt; GRANT ALL PRIVILEGES ON DATABASE mydb TO myuser<span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>You can create your first table and run a sql-file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">PGPASSWORD</span><span class="o">=</span>foobar psql -U myuser -d mydb -f create-tables.sql

<span class="c1"># file: create-tables.sql</span>
CREATE TABLE users <span class="o">(</span>
       id serial PRIMARY KEY,
       firstname text,
       surname text,
       email text NOT NULL,
       age smallint
<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>You made it! Finally you can start your application development with
your new and shiny PostgreSQL database. Do not forget this
configuration is for development purpose only. For production you
would use a cloud-provider DB-Service like <a href="https://aws.amazon.com/rds/">AWS
RDS</a> or <a href="https://cloud.google.com/sql/">Google Cloud
SQL</a> with different security settings.</p>
<h2 id="tldr">TL;DR</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># install postgres</span>
sudo apt-get install postgresql

<span class="c1"># login with the postgres OS-user</span>
sudo -u postgres psql

<span class="c1"># add a password to the postgres user in the psql-shell</span>
psql&gt; <span class="se">\p</span>assword postgres

<span class="c1"># change /etc/postgresql/11/main/pg_hba.conf</span>
<span class="c1"># auth Method should be everywhere &#34;md5&#34;, example file see above</span>

<span class="c1"># restart postgres in order to apply changes</span>
sudo service postgresql restart

<span class="c1"># login with the postgres user and create your application user and a new database with correct privileges</span>
<span class="nv">PGPASSWORD</span><span class="o">=</span>&lt;your_password&gt; psql -U postgres
psql&gt; CREATE USER myuser WITH ENCRYPTED PASSWORD <span class="s1">&#39;foobar&#39;</span><span class="p">;</span>
psql&gt; CREATE DATABASE mydb<span class="p">;</span>
psql&gt; GRANT ALL PRIVILEGES ON DATABASE mydb TO myuser<span class="p">;</span>

<span class="c1"># create a table in your new database with the new user</span>
&gt; <span class="nv">PGPASSWORD</span><span class="o">=</span>foobar psql -U myuser -d mydb -f create-tables.sql

<span class="c1"># file: create-tables.sql</span>
CREATE TABLE users <span class="o">(</span>
       id serial PRIMARY KEY,
       firstname text,
       surname text,
       email text NOT NULL,
       age smallint
<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/linux/" term="linux" label="linux" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/postgres/" term="postgres" label="postgres" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Emacs Delete Lines</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/emacs-delete-lines/" />
            <id>https://gerlacdt.github.io/posts/emacs-delete-lines/</id>
            <updated>2020-03-25T11:56:39+01:00</updated>
            <published>2019-05-13T10:34:42+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Sometimes when i write small scripts i tend to insert print statements for debugging. After i verified the correctness of my program i want to get rid of all unnecessary debug statements. With Emacs you can delete all lines which match a specific regular expression with M-x flush-lines or with its alias M-x delete-matching-lines.]]></summary>
            
                <content type="html"><![CDATA[<p>Sometimes when i write small scripts i tend to insert <code>print</code>
statements for debugging. After i verified the correctness of my
program i want to get rid of all unnecessary debug statements. With
Emacs you can delete all lines which match a specific <em>regular
expression</em> with <code>M-x flush-lines</code> or with its alias <code>M-x delete-matching-lines</code>. Interactively you can enter your regular
expression and all matching lines will be deleted from you cursor
position downwards.</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/emacs/" term="emacs" label="emacs" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Install Emacs on MacOS</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/emacs-macos/" />
            <id>https://gerlacdt.github.io/posts/emacs-macos/</id>
            <updated>2020-03-26T21:48:57+01:00</updated>
            <published>2019-04-13T10:34:42+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Yesterday Emacs 26.2 was released, see: https://www.gnu.org/software/emacs/news/NEWS.26.2
In this short guide i want to show how i install Emacs on my MacBook. I use the vanilla Emacs build from https://emacsformacosx.com/. It is just a simple .dmg file.
After installing the dmg file, Emacs is now available on your Mac as an application but not in the terminal-app.]]></summary>
            
                <content type="html"><![CDATA[<p>Yesterday Emacs 26.2 was released, see: <a href="https://www.gnu.org/software/emacs/news/NEWS.26.2">https://www.gnu.org/software/emacs/news/NEWS.26.2</a></p>
<p>In this short guide i want to show how i install Emacs on my MacBook.
I use the vanilla Emacs build from <a href="https://emacsformacosx.com/">https://emacsformacosx.com/</a>.
It is just a simple <em>.dmg file</em>.</p>
<p>After installing the <em>dmg file</em>, Emacs is now available on your Mac as
an application but not in the terminal-app. The terminal still opens
the pre-install Emacs version. To make the new version available you
have to create a bash-script and put it in your <code>$PATH</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># filename ~/bin/emacs</span>

<span class="c1">#!/bin/sh</span>
/Applications/Emacs.app/Contents/MacOS/Emacs <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>Put the <em>emacsclient</em> command in your <code>$PATH</code> too. Just run the
following line:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ln -s /Applications/Emacs.app/Contents/MacOS/bin/emacsclient /usr/local/bin
</code></pre></td></tr></table>
</div>
</div><p>For further information see: <a href="https://emacsformacosx.com/tips">https://emacsformacosx.com/tips</a></p>
<h2 id="my-emacs-startup-workflow">My Emacs startup workflow</h2>
<p>When i start a session i run the emacs-server with <code>emacs --daemon</code>. This runs emacs in the background. Afterwards you can use
<code>emacsclient</code> to open files. From now on <em>emacsclient</em> does not
startup a full Emacs instance but utilises the running
emacs-server. Basically emacs opens instantly!</p>
<p>Additionally i created some bash aliases in my <code>~/.zshrc</code> or
<code>~/.bashrc</code> in order to shorten the emacs commands.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># filename ~/.zshrc or ~/.bashrc</span>

<span class="nb">alias</span> <span class="nv">edd</span><span class="o">=</span><span class="s1">&#39;emacs --daemon&#39;</span>  <span class="c1"># start emacs server in background</span>
<span class="nb">alias</span> <span class="nv">e</span><span class="o">=</span><span class="s1">&#39;emacsclient -t&#39;</span>  <span class="c1"># open emacs in terminal</span>
<span class="nb">alias</span> <span class="nv">ecc</span><span class="o">=</span><span class="s1">&#39;emacsclient -c&#39;</span> <span class="c1"># open GUI-emacs</span>
<span class="nb">alias</span> <span class="nv">ew</span><span class="o">=</span><span class="s1">&#39;emacs -nw -q&#39;</span>   <span class="c1"># opens vanilla emacs in the terminal</span>
</code></pre></td></tr></table>
</div>
</div><p>Finally i made Emacs the standard-editor in the shell. This makes
other terminal-applications use Emacs, e.g. git for editing
git-commit-messages.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># filename: ~/.zshrc or ~/.bashrc</span>

<span class="nb">export</span> <span class="nv">EDITOR</span><span class="o">=</span><span class="s2">&#34;emacs -q -nw&#34;</span>  <span class="c1"># make emacs my default editor in the terminal</span>
</code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/emacs/" term="emacs" label="emacs" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Find and Replace in multiple files</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/find-and-replace/" />
            <id>https://gerlacdt.github.io/posts/find-and-replace/</id>
            <updated>2020-03-26T21:48:57+01:00</updated>
            <published>2019-04-13T10:13:14+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[As a software programmer you often have to search and replace a specific string in multiple files because of a refactoring or just improving a variable or function name.
Normally you can use your IDE or your editor for this. But in bigger codebases with thousand or million lines of code it can be very slow.]]></summary>
            
                <content type="html"><![CDATA[<p>As a software programmer you often have to search and replace a
specific string in multiple files because of a refactoring or just
improving a variable or function name.</p>
<p>Normally you can use your IDE or your editor for this. But in bigger
codebases with thousand or million lines of code it can be very
slow. Neither do IDEs work with remote SSH-sessions. In such
situations the command-line is pretty handy. It is available
everywhere and it is fast.</p>
<p>The following command replaces <code>old</code> with <code>new</code> in all <code>*.go</code> files in
the current directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># bsd tools, e.g. MacOS</span>
find . -iname <span class="s1">&#39;*.go&#39;</span> <span class="p">|</span> xargs sed -i <span class="s1">&#39;&#39;</span> -e <span class="s1">&#39;s/old/new/g&#39;</span>

<span class="c1"># gnu tools, e.g. Linux</span>
find . -iname <span class="s1">&#39;*.go&#39;</span> <span class="p">|</span> xargs sed -i -e <span class="s1">&#39;s/old/new/g&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>I use this often in combination with
<a href="https://git-scm.com/">git</a>. First i commit my latest changes, so i
have a clear state. Then i issue the above <code>find-sed</code>
command. Afterwards i check the changes in the files with <code>git diff</code>. If i do not like them, reverting is possible with <code>git reset</code>.</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/linux/" term="linux" label="linux" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/bash/" term="bash" label="bash" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ag the_silver_searcher, a grep replacement</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/ag-silver-searcher/" />
            <id>https://gerlacdt.github.io/posts/ag-silver-searcher/</id>
            <updated>2020-03-26T21:48:57+01:00</updated>
            <published>2019-04-13T10:04:01+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[As a programmer you often search for a specific strings or regexps in multiple files. Previously i used to do this with the well-known GNU-tools find and grep.
The following command searches for main in all *.go files in the current directory and:]]></summary>
            
                <content type="html"><![CDATA[<p>As a programmer you often search for a specific strings or regexps in
multiple files. Previously i used to do this with the well-known
GNU-tools <code>find</code> and <code>grep</code>.</p>
<p>The following command searches for <code>main</code> in all <code>*.go</code> files in the
current directory and:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">find . -iname <span class="s1">&#39;*.go&#39;</span> <span class="p">|</span> xargs grep -inH  <span class="s2">&#34;main&#34;</span>
<span class="c1"># -i ignore case, -n print line number, -H print filename</span>
</code></pre></td></tr></table>
</div>
</div><p>Recently i discovered <a href="https://github.com/ggreer/the_silver_searcher">ag the silver
searcher</a>. <code>ag</code> is
much faster than <code>grep</code> and searches directories recursively by
default. <code>ag</code> respects out-of-the-box your <code>.gitignore</code> files.</p>
<p>You can install <code>ag</code> on a Mac with <a href="https://brew.sh/">brew</a>, <code>brew install the_silver_searcher</code>.  The following command searches all
files in your current directory for the string &ldquo;main&rdquo;.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ag main
</code></pre></td></tr></table>
</div>
</div><p><img src="/img/ag_silver_searcher.png" alt="ag_silver_searcher"></p>
<p><code>ag</code> considers your <code>.gitignore</code> automatically but you can tweak it
even more with your own <code>.agignore</code> file. I put my <code>.agignore</code> file in
my <code>$HOME</code> folder so <code>ag</code> can find it everywhere.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># filename: ~/.agignore</span>

node_modules/
build/
target/
your-custom-folder-to-ignore/
*.bak
</code></pre></td></tr></table>
</div>
</div><p>And if you miss your regular grep-output format, just use:</p>
<p><code>ag main --vimgrep</code></p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/linux/" term="linux" label="linux" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/bash/" term="bash" label="bash" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Emacs Test Regexps</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/emacs-test-regexps/" />
            <id>https://gerlacdt.github.io/posts/emacs-test-regexps/</id>
            <updated>2020-03-26T21:48:57+01:00</updated>
            <published>2019-04-06T10:39:15+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Replacing or searching text with regular expressions is very common. But sometimes it is hard to get them right and you need some playground to try them out. In order to verify regular expressions i used to visit webpages like:
 https://regexr.com/ https://regex101.]]></summary>
            
                <content type="html"><![CDATA[<p>Replacing or searching text with <em>regular expressions</em> is very
common. But sometimes it is hard to get them right and you need some
playground to try them out. In order to verify regular expressions i
used to visit webpages like:</p>
<ul>
<li><a href="https://regexr.com/">https://regexr.com/</a></li>
<li><a href="https://regex101.com/">https://regex101.com/</a></li>
</ul>
<p>But these webpages are optimised for perl, javascript or bash
expressions and do not support Emacs regular expressions directly. In
Emacs you have to consider some peculiarities. For example you have to
escape parentheses.</p>
<p>Recently i learnt about <code>M-x regexp-builder</code> with which you can test
your regular-expressions interactively. Just enter the regular
expression and the text in your buffer will be highlighted
immediately. It even considers different capture groups and highlights
them in different colours. Very nice!</p>
<p><img src="/img/emacs_regexp_builder.png" alt="emacs_regexp_builder"></p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/emacs/" term="emacs" label="emacs" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Things to consider with microservices</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/microservices/" />
            <id>https://gerlacdt.github.io/posts/microservices/</id>
            <updated>2020-04-03T14:13:00+02:00</updated>
            <published>2019-03-30T09:53:54+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Introduction Some years ago i was involved in migrating a big IBM Websphere monolith into a microservice landscape. We had a lot of problems with the monolith. Our development speed slowed down. We had many merge conflicts because of too many dependencies in the codebase.]]></summary>
            
                <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Some years ago i was involved in migrating a big IBM Websphere
monolith into a microservice landscape. We had a lot of problems with
the monolith. Our development speed slowed down. We had many merge
conflicts because of too many dependencies in the codebase. We outgrew
the monolithic design and decided to introduce microservices. We
extracted different domains like payment, booking, user and
search. The teams were restructured into two-pizza teams.</p>
<p>The whole migration was very structured and well planned. We migrated
incrementally with the <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler">strangler
pattern</a>.
As long we were ~20 developers in 5 different teams, everything was
fine. Teams worked independently in their domain. They could scale,
deploy independently and followed their own release cycles.</p>
<p>But microservices bring new technical challenges. Maybe you know the saying:</p>
<blockquote>
<p>Microservices solve organizational problems.</p>
<p>Microservices cause technical problems.</p>
</blockquote>
<p><a href="https://speakerdeck.com/peterbourgon/go-plus-microservices-equals-go-kit?slide=15">Peter Bourgon</a></p>
<p>Developers tend to ignore, forget or just simply do not know about
these challenges. They are overwhelmed by the new opportunities in the
shiny microservice world. In the following i want to present my
experience what we underestimated or forgot in our
microservice-migration.</p>
<h2 id="avoid-a-heterogeneous-it-landscape">Avoid a heterogeneous IT-landscape</h2>
<p>Microservices give you a lot of freedom which technology to choose
like programming language, database or web-framework. This is both
boon and bane. On the one side every team can choose the technology
which fits best, on the other side developers are adventurous and try
out new fancy programming languages and other bleeding edge
technology. And soon you have a dozen different tech stacks to
support. Some teams build their own tech-knowledge silos. And don&rsquo;t
get me wrong here, it is totally fine if a team has its
domain-knowledge silo, but it is not fine if the team is the only one
in the company who uses a fancy programming language.  At Google, they
have thousands of engineers and they try to stick to only 4 languages
in the backend. The supported languages are C++, Java, Python and Go,
see <a href="https://arxiv.org/pdf/1702.01715.pdf">Software Engineering at Google, Fergus
Henderson</a>.  If a backend team
wants to start with another language they need to argument very hard
why they cannot fulfil their job with the company-wide supported
languages. There is a clear decision-process in place how to introduce
a new technology. This restricts the developers from using the newest
bleeding-edge technology.  Another advantage is that one can focus on
business problems and avoid discussions about tech explorations
etc. Your internal libraries need to be written in and supported for
few languages. Developers will also have an easy time when they want
to switch teams. Team rotation is encouraged, facilitates
knowledge-transfer and pushes developers out of their comfort zone
which makes them more valuable.</p>
<p>A <a href="https://www.thoughtworks.com/de/radar">technology radar</a> serves as
an overview for the supported tools, programming languages and
platforms. A radar helps to keep track of all technology used in your
company.</p>
<h2 id="have-a-good-monitoringtracinglogging-in-place">Have a good Monitoring/Tracing/Logging in place</h2>
<p>We suffered sometime from logging problems because our ElasticSearch
cluster was overloaded or some indices had conflicts. Logging is
hard. Make sure you have clear logging-guildlines. Do not log too
much, at best you have <a href="https://peter.bourgon.org/blog/2016/02/07/logging-v-instrumentation.html">silent
services</a>,
i.e. only log if a manual intervention is needed in case of an
error. Logging is fine for debugging and error tracking in the
development stage but it should not be overused in production. Be
careful if your monitoring and alarming is based on logging. If your
log-cluster is flooded, your monitoring will not work either!</p>
<p>Have strict rules for monitoring. No service should go into production
without monitoring. With microservices you need transparency in order
to do failure analysis or get notified if something is wrong. At least
monitor the <a href="https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/#xref_monitoring_golden-signals">four golden
signals</a>:</p>
<ol>
<li>
<p>Latency. How high is the response time? Make sure you distinguish
failed requests from successful requests. Failed requests can be
fast and screw up your metrics.</p>
</li>
<li>
<p>Traffic. How many Requests per second (RPS) do we serve?</p>
</li>
<li>
<p>Errors. How high is the error rate? </br>
Number of error responses / Number of successful responses</p>
</li>
<li>
<p>Saturation. How full is your service? CPU utilisation, memory
consumption.</p>
</li>
</ol>
<h2 id="dont-forget-the-8-fallacies-of-distributed-computing">Don&rsquo;t forget the 8 fallacies of distributed computing</h2>
<p><a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing">Fallacies of distributed computing by Peter
Deutsch</a></p>
<ol>
<li>
<p>The network is reliable.</p>
<p>Your HTTP-calls will fail from time to time. So make sure you have
some retry-mechanism in place. But do not retry naively!
E.g. retries make no sense if the http response code is 400
BAD_REQUEST, no matter how often you try the request will never be successful.
Neither you should do retries on POST requests, HTTP POST requests
are by definition not idempotent and you could accidentally create a
lot of resources like orders or trigger payments. Your customers will not
be happy.</p>
<p>You should also limit your retries, do not retry indefinitely,
otherwise you can cause overload on other services, see
<a href="https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/">cascading failures</a>.</p>
<p>Do not forget to protect your services with timeouts. Missing timeouts
make I/O calls wait too long and if they pile up they consume all
your memory or other resources like a thread pool. In the worst case you service will be killed by your docker scheduler because the memory limit is exceeded.</p>
<p>For very high-load services you should consider <a href="https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/#xref_cascading-failure_load-shed-graceful-degredation">load shedding or
graceful degradation</a>
in order to protect these service from going down.</p>
</li>
<li>
<p>Latency is zero.</p>
<p>Network can be slow. You should clearly separate internal function
calls from network calls. E.g. do not use network calls in
loops. Better fetch everything with one network call.</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// bad practice! Doing multiple network calls
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">getUsers</span><span class="p">(</span><span class="nx">userIds</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span> <span class="p">(</span><span class="nx">id</span> <span class="k">of</span> <span class="nx">userIds</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">fetchSingleUser</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="nx">users</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">users</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// good, only one network call
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">getUsers</span><span class="p">(</span><span class="nx">userIds</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nx">fetchUsers</span><span class="p">(</span><span class="nx">userIds</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>
<p>Bandwidth is infinite.</p>
<p>Use your bandwidth sparingly. E.g logging every http request and
response is definitely too much. Do not use  sql-statements like this:
<code>SELECT * from  table</code>, always select only required columns.</p>
</li>
<li>
<p>The network is secure.</p>
</li>
<li>
<p>Topology doesn&rsquo;t change.</p>
<p>Especially with self-healing services and docker random port usage,
IP-addresses and ports change often. Do not use static IP-addresses
or static ports. Use sophisticated service-discovery
mechanisms. Many Docker-Scheduler provide them out-of-the-box like
<a href="https://kubernetes.io/">Kubernetes</a> or <a href="https://www.nomadproject.io/">Hashicorp&rsquo;s
Nomad</a>. With <a href="https://aws.amazon.com/ecs/">AWS
ECS</a> you can use an <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html">AWS Application
Load Balancer</a> (ALB) for service discovery.</p>
</li>
<li>
<p>There is one administrator.</p>
<p>Distributed systems are complex. Do not expect that there is
one person who knows it all. For bug analysis you need multiple
people or teams.</p>
</li>
<li>
<p>Transport cost is zero.</p>
<p>Network calls are expensive. You need to establish a connection,
you need to serialize and deserialize the message body which cost
CPU. The less you send the better. If you notice that you
services are chatty, consider restructuring the domain
boundaries. Most probably your domains do overlap or have multiple
responsibilities.</p>
</li>
<li>
<p>The network is homogeneous</p>
<p>It&rsquo;s not. Before docker, almost all applications ran on customized,
&ldquo;snowflaky&rdquo; servers configured via non-reproducible
ssh-session. With Kubernetes or AWS ECS you can have clusters with
thousands of servers which are configured exactly the same. One
single DevOps guy can operate thousands of servers! Therefore you
should agree on a common cluster management tool with as few
clusters as possible. Only then, you gain the real advantages of
Docker. Further agree on a single data transfer format like
<a href="https://www.json.org/">JSON</a> or <a href="https://developers.google.com/protocol-buffers/">Protocol
Buffers</a> with
<a href="https://grpc.io/">gRPC</a>. Strive for as much homogeneity as
possible to reduce operation and maintenance costs. In my opinion
the homogeneity provided by Docker is its biggest advantage.</p>
</li>
</ol>
<h2 id="other-things-to-consider">Other things to consider</h2>
<ul>
<li>
<p>Keep your domain boundaries clear and separated. Teams should always
be able to deploy independently and without consulting other
teams. You ever experienced a deployment where 3 or 4 services were
involved and had to be deployed synchronously because of
incompatibilities of API-versions or dependency on the same database.
Congratulations you built a distributed monolith.</p>
</li>
<li>
<p>Have a good CI/CD pipeline with automatic tests and deployments.
Make sure all teams use the same deployment and glue scripts. Use
one cluster (Kubernetes, AWS ECS, Hashicorp Nomad) for the whole
company (as long as you do not exceed hundreds of servers). This
will keep the maintenance effort low.</p>
</li>
<li>
<p>If you have reusable modules/libraries, make sure you have
transitive CI-builds</p>
</li>
<li>
<p>Adhere to good coding cloud-native practices, see
<a href="https://12factor.net">12-factor-app</a> and <a href="https://landing.google.com/sre/books/">Site Reliability
Engineering</a></p>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Microservices are hard. Do not forget this. In the web you hear mainly
about the big success-stories like Google, Amazon and the like. But
for the most of us there are serious disadvantages which are normally
not mentioned. And do not get me wrong, microservices are great. It
was definitely the way to go for us. Today we are more than 100
developers and it gives me the creeps when i imagine that all of them
would work on single monolithic git-repository.  It is a long and hard
way to a productive microservice landscape but definitively worth
it. Just do not underestimate monitoring, automation and the fallacies
of distributed systems!</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/programming/" term="programming" label="programming" />
                            
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/microservices/" term="microservices" label="microservices" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">My Presentations</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/my-presentations/" />
            <id>https://gerlacdt.github.io/posts/my-presentations/</id>
            <updated>2020-03-25T13:37:03+01:00</updated>
            <published>2019-03-16T11:01:35+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[Links to my presentation slides  clojure introduction javascript introduction java8 new features hashicorp nomad tutorial  ]]></summary>
            
                <content type="html"><![CDATA[<h2 id="links-to-my-presentation-slides">Links to my presentation slides</h2>
<ul>
<li><a href="http://gerlacdt.github.io/slides/clojure-introduction/slides/index.html">clojure introduction</a></li>
<li><a href="http://gerlacdt.github.io/slides/javascript-introduction/slides/index.html">javascript introduction</a></li>
<li><a href="http://gerlacdt.github.io/slides/java8-introduction/slides/index.html">java8 new features</a></li>
<li><a href="http://gerlacdt.github.io/slides/nomad-scheduler/slides/index.html">hashicorp nomad tutorial</a></li>
</ul>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">My Nickname Is Danger</title>
            <link rel="alternate" type="text/html" href="https://gerlacdt.github.io/posts/my-name-is-danger/" />
            <id>https://gerlacdt.github.io/posts/my-name-is-danger/</id>
            <updated>2020-03-25T11:18:17+01:00</updated>
            <published>2019-03-15T08:51:40+01:00</published>
            <author>
                    <name>Daniel Gerlach</name>
                    <uri>https://gerlacdt.github.io/</uri>
                    </author>
            <summary type="html"><![CDATA[A few years ago one of my colleagues &ldquo;discovered&rdquo; an algorithm which led to my nickname:
 take the 3 first characters of my first name and surname concatenate them: DANiel + GERlach =&gt; Danger  The algorithm can be implemented as a pure function in Javascript:]]></summary>
            
                <content type="html"><![CDATA[<p>A few years ago one of my colleagues &ldquo;discovered&rdquo; an algorithm which
led to my nickname:</p>
<ul>
<li>take the 3 first characters of my first name and surname</li>
<li>concatenate them: DANiel + GERlach =&gt; Danger</li>
</ul>
<p>The algorithm can be implemented as a <strong>pure function</strong> in Javascript:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">getNickname</span><span class="p">(</span><span class="nx">fullname</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">fullname</span>
    <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">getNickname</span><span class="p">(</span><span class="s1">&#39;Daniel Gerlach&#39;</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>   <span class="c1">// =&gt; DanGer
</span></code></pre></td></tr></table>
</div>
</div>]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://gerlacdt.github.io/tags/javascript/" term="javascript" label="javascript" />
                            
                        
                    
                
            
        </entry>
    
</feed>
